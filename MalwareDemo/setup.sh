#!/bin/bash

# Android Security Research Demo - Automated Setup Script
# This script automates the setup process for the security research platform

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="Android Security Research Demo"
MIN_ANDROID_SDK=21
TARGET_ANDROID_SDK=34
REQUIRED_PYTHON_VERSION="3.8"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "\n${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}\n"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check system requirements
check_system_requirements() {
    print_header "Checking System Requirements"
    
    # Check operating system
    OS="$(uname -s)"
    case "${OS}" in
        Linux*)     MACHINE=Linux;;
        Darwin*)    MACHINE=Mac;;
        CYGWIN*)    MACHINE=Cygwin;;
        MINGW*)     MACHINE=MinGw;;
        *)          MACHINE="UNKNOWN:${OS}"
    esac
    print_status "Operating System: ${MACHINE}"
    
    # Check available disk space (need at least 20GB)
    if [[ "$MACHINE" == "Linux" || "$MACHINE" == "Mac" ]]; then
        AVAILABLE_SPACE=$(df -BG . | tail -1 | awk '{print $4}' | sed 's/G//')
        if [[ $AVAILABLE_SPACE -lt 20 ]]; then
            print_warning "Available disk space: ${AVAILABLE_SPACE}GB (Recommended: 20GB+)"
        else
            print_success "Available disk space: ${AVAILABLE_SPACE}GB ✓"
        fi
    fi
    
    # Check memory
    if [[ "$MACHINE" == "Linux" ]]; then
        TOTAL_RAM=$(free -g | awk '/^Mem:/{print $2}')
        print_status "Total RAM: ${TOTAL_RAM}GB"
        if [[ $TOTAL_RAM -lt 8 ]]; then
            print_warning "Recommended RAM: 8GB+ (Current: ${TOTAL_RAM}GB)"
        fi
    elif [[ "$MACHINE" == "Mac" ]]; then
        TOTAL_RAM=$(sysctl -n hw.memsize | awk '{print int($0/1024/1024/1024)}')
        print_status "Total RAM: ${TOTAL_RAM}GB"
        if [[ $TOTAL_RAM -lt 8 ]]; then
            print_warning "Recommended RAM: 8GB+ (Current: ${TOTAL_RAM}GB)"
        fi
    fi
}

# Check Java installation
check_java() {
    print_header "Checking Java Development Kit"
    
    if command_exists java && command_exists javac; then
        JAVA_VERSION=$(java -version 2>&1 | head -n 1 | cut -d'"' -f 2)
        print_success "Java JDK found: $JAVA_VERSION"
        
        # Check if Java 11 or higher
        JAVA_MAJOR_VERSION=$(echo $JAVA_VERSION | cut -d'.' -f 1)
        if [[ $JAVA_MAJOR_VERSION -ge 11 ]]; then
            print_success "Java version is compatible ✓"
        else
            print_error "Java 11 or higher required. Current: $JAVA_VERSION"
            exit 1
        fi
    else
        print_error "Java JDK not found. Please install Java 11 or higher."
        print_status "Download from: https://adoptium.net/ or https://www.oracle.com/java/technologies/downloads/"
        exit 1
    fi
}

# Check Android Studio and SDK
check_android_sdk() {
    print_header "Checking Android SDK"
    
    # Check for ANDROID_HOME environment variable
    if [[ -z "$ANDROID_HOME" ]]; then
        # Try common locations
        COMMON_LOCATIONS=(
            "$HOME/Android/Sdk"
            "$HOME/Library/Android/sdk"
            "/opt/android-sdk"
            "/usr/local/android-sdk"
        )
        
        for location in "${COMMON_LOCATIONS[@]}"; do
            if [[ -d "$location" ]]; then
                export ANDROID_HOME="$location"
                print_success "Found Android SDK at: $ANDROID_HOME"
                break
            fi
        done
        
        if [[ -z "$ANDROID_HOME" ]]; then
            print_error "Android SDK not found. Please install Android Studio and set ANDROID_HOME."
            print_status "Download from: https://developer.android.com/studio"
            exit 1
        fi
    else
        print_success "Android SDK found: $ANDROID_HOME"
    fi
    
    # Check if required SDK platforms are installed
    SDK_MANAGER="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
    if [[ ! -f "$SDK_MANAGER" ]]; then
        SDK_MANAGER="$ANDROID_HOME/tools/bin/sdkmanager"
    fi
    
    if [[ -f "$SDK_MANAGER" ]]; then
        # Check for required platforms
        if $SDK_MANAGER --list | grep -q "platforms;android-$TARGET_ANDROID_SDK"; then
            print_success "Android SDK Platform $TARGET_ANDROID_SDK available ✓"
        else
            print_warning "Installing Android SDK Platform $TARGET_ANDROID_SDK..."
            $SDK_MANAGER "platforms;android-$TARGET_ANDROID_SDK"
        fi
        
        # Check for build tools
        if $SDK_MANAGER --list | grep -q "build-tools;34.0.0"; then
            print_success "Android Build Tools available ✓"
        else
            print_warning "Installing Android Build Tools..."
            $SDK_MANAGER "build-tools;34.0.0"
        fi
    else
        print_warning "SDK Manager not found. Please ensure Android command-line tools are installed."
    fi
}

# Check Python installation for C2 server
check_python() {
    print_header "Checking Python for C2 Server"
    
    if command_exists python3; then
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f 2)
        print_success "Python found: $PYTHON_VERSION"
        
        # Check if Python version is compatible
        PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d'.' -f 1)
        PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f 2)
        
        if [[ $PYTHON_MAJOR -eq 3 && $PYTHON_MINOR -ge 8 ]]; then
            print_success "Python version is compatible ✓"
        else
            print_warning "Python 3.8+ recommended. Current: $PYTHON_VERSION"
        fi
        
        # Check pip
        if command_exists pip3; then
            print_success "pip3 found ✓"
        else
            print_error "pip3 not found. Please install pip for Python 3."
            exit 1
        fi
    else
        print_warning "Python 3 not found. C2 server features will not be available."
        print_status "Install Python 3.8+ from: https://www.python.org/downloads/"
    fi
}

# Setup C2 Server
setup_c2_server() {
    print_header "Setting up C2 Server"
    
    if command_exists python3; then
        cd C2Server
        
        # Create virtual environment
        if [[ ! -d "venv" ]]; then
            print_status "Creating Python virtual environment..."
            python3 -m venv venv
        fi
        
        # Activate virtual environment
        print_status "Activating virtual environment..."
        source venv/bin/activate
        
        # Install requirements
        if [[ -f "requirements.txt" ]]; then
            print_status "Installing Python dependencies..."
            pip install -r requirements.txt
            print_success "C2 Server dependencies installed ✓"
        else
            print_error "requirements.txt not found in C2Server directory"
            cd ..
            return 1
        fi
        
        # Make start script executable
        if [[ -f "start_c2_server.sh" ]]; then
            chmod +x start_c2_server.sh
            print_success "C2 Server setup completed ✓"
        fi
        
        cd ..
    else
        print_warning "Skipping C2 server setup - Python not available"
    fi
}

# Setup Android project
setup_android_project() {
    print_header "Setting up Android Project"
    
    # Check if gradlew exists
    if [[ -f "gradlew" ]]; then
        # Make gradlew executable
        chmod +x gradlew
        print_success "Gradle wrapper configured ✓"
        
        # Download dependencies
        print_status "Downloading project dependencies..."
        ./gradlew build --refresh-dependencies
        
        if [[ $? -eq 0 ]]; then
            print_success "Android project setup completed ✓"
        else
            print_error "Gradle build failed. Please check your Android SDK configuration."
            return 1
        fi
    else
        print_error "gradlew not found. This doesn't appear to be a valid Android project."
        return 1
    fi
}

# Create desktop shortcuts (Linux/Mac)
create_shortcuts() {
    print_header "Creating Desktop Shortcuts"
    
    CURRENT_DIR=$(pwd)
    
    if [[ "$MACHINE" == "Linux" ]]; then
        DESKTOP_DIR="$HOME/Desktop"
        if [[ -d "$DESKTOP_DIR" ]]; then
            # Android Studio shortcut
            cat > "$DESKTOP_DIR/Android_Security_Demo.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Android Security Demo
Comment=Open Android Security Research Demo in Android Studio
Exec=bash -c "cd '$CURRENT_DIR' && studio ."
Icon=applications-development
Terminal=false
Categories=Development;
EOF
            chmod +x "$DESKTOP_DIR/Android_Security_Demo.desktop"
            
            # C2 Server shortcut
            cat > "$DESKTOP_DIR/C2_Server.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=C2 Server
Comment=Start Command & Control Server
Exec=bash -c "cd '$CURRENT_DIR/C2Server' && ./start_c2_server.sh"
Icon=applications-internet
Terminal=true
Categories=Development;Network;
EOF
            chmod +x "$DESKTOP_DIR/C2_Server.desktop"
            
            print_success "Desktop shortcuts created ✓"
        fi
    elif [[ "$MACHINE" == "Mac" ]]; then
        print_status "Creating macOS aliases..."
        # macOS alias creation would go here
        print_success "macOS shortcuts configured ✓"
    fi
}

# Setup development environment
setup_environment() {
    print_header "Setting up Development Environment"
    
    # Create necessary directories
    mkdir -p logs
    mkdir -p backups
    mkdir -p test-results
    
    # Set up environment variables
    cat > .env << EOF
# Android Security Research Demo Environment
ANDROID_HOME=$ANDROID_HOME
PROJECT_ROOT=$(pwd)
C2_SERVER_URL=http://localhost:5000
LOG_LEVEL=DEBUG
TESTING_MODE=true
EOF
    
    print_success "Development environment configured ✓"
}

# Verify installation
verify_installation() {
    print_header "Verifying Installation"
    
    local errors=0
    
    # Check Android project
    if [[ -f "gradlew" ]]; then
        print_status "Testing Android build..."
        if ./gradlew assembleDebug --quiet; then
            print_success "Android build: PASS ✓"
        else
            print_error "Android build: FAIL ✗"
            errors=$((errors + 1))
        fi
    fi
    
    # Check C2 server
    if [[ -d "C2Server" && -f "C2Server/requirements.txt" ]]; then
        print_status "Testing C2 server dependencies..."
        cd C2Server
        if source venv/bin/activate && python -c "import flask, flask_socketio"; then
            print_success "C2 server dependencies: PASS ✓"
        else
            print_error "C2 server dependencies: FAIL ✗"
            errors=$((errors + 1))
        fi
        cd ..
    fi
    
    # Check documentation
    if [[ -d "docs" ]]; then
        DOC_COUNT=$(find docs -name "*.md" | wc -l)
        print_success "Documentation files: $DOC_COUNT found ✓"
    fi
    
    if [[ $errors -eq 0 ]]; then
        print_success "All verification checks passed! ✓"
        return 0
    else
        print_error "$errors verification checks failed ✗"
        return 1
    fi
}

# Print next steps
print_next_steps() {
    print_header "Setup Complete - Next Steps"
    
    echo -e "${GREEN}✅ Setup completed successfully!${NC}\n"
    
    echo -e "${BLUE}Quick Start Guide:${NC}"
    echo -e "1. ${YELLOW}Open Android Studio:${NC}"
    echo -e "   - Launch Android Studio"
    echo -e "   - Open project: $(pwd)"
    echo -e "   - Wait for Gradle sync"
    echo ""
    
    echo -e "2. ${YELLOW}Connect Android Device:${NC}"
    echo -e "   - Enable Developer Options"
    echo -e "   - Enable USB Debugging"
    echo -e "   - Connect via USB"
    echo ""
    
    echo -e "3. ${YELLOW}Build and Install:${NC}"
    echo -e "   - Click 'Run' in Android Studio"
    echo -e "   - Or use: ./gradlew installDebug"
    echo ""
    
    echo -e "4. ${YELLOW}Start C2 Server (Optional):${NC}"
    echo -e "   - cd C2Server"
    echo -e "   - ./start_c2_server.sh"
    echo -e "   - Access at: http://localhost:5000"
    echo ""
    
    echo -e "${BLUE}Important Documentation:${NC}"
    echo -e "📖 Setup Guide:      docs/SETUP_GUIDE.md"
    echo -e "📖 User Manual:      docs/USER_MANUAL.md"
    echo -e "📖 Security Guide:   docs/SECURITY_GUIDE.md"
    echo -e "📖 Technical Docs:   docs/TECHNICAL_DOCS.md"
    echo ""
    
    echo -e "${RED}⚠️  CRITICAL REMINDERS:${NC}"
    echo -e "🔒 Use only on devices you own"
    echo -e "🔒 Review all security guidelines"
    echo -e "🔒 Educational purposes only"
    echo -e "🔒 Comply with all applicable laws"
    echo ""
    
    echo -e "${GREEN}Happy learning! 🛡️${NC}"
}

# Main setup function
main() {
    clear
    echo -e "${BLUE}"
    echo "╔════════════════════════════════════════════════════════════════╗"
    echo "║              Android Security Research Demo Setup              ║"
    echo "║                   Educational Platform Setup                   ║"
    echo "╚════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}\n"
    
    echo -e "${YELLOW}⚠️  IMPORTANT LEGAL NOTICE:${NC}"
    echo -e "This software is for educational and research purposes only."
    echo -e "Only use on devices you own or have explicit permission to test."
    echo -e "Unauthorized access to computer systems is illegal."
    echo ""
    
    read -p "Do you agree to use this software responsibly? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}Setup aborted.${NC}"
        exit 1
    fi
    
    # Run setup steps
    check_system_requirements
    check_java
    check_android_sdk
    check_python
    setup_android_project
    setup_c2_server
    setup_environment
    create_shortcuts
    
    # Verify everything is working
    if verify_installation; then
        print_next_steps
    else
        print_error "Setup completed with errors. Please review the output above."
        exit 1
    fi
}

# Error handling
trap 'echo -e "\n${RED}Setup interrupted. Please resolve any issues and run again.${NC}"; exit 1' INT

# Run main setup
main "$@"
