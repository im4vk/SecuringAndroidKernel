package com.securitydemo.malware.activities

import android.app.AlertDialog
import android.content.Intent
import android.content.pm.PackageInstaller
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.securitydemo.malware.R
import com.securitydemo.malware.services.MaliciousAccessibilityService
import com.securitydemo.malware.utils.SilentInstaller
import kotlinx.coroutines.*
import java.io.File

/**
 * SECURITY DEMO: Silent App Installation Activity
 * 
 * This activity demonstrates how malware can install apps silently:
 * - Using accessibility services to automate install dialogs
 * - Exploiting package installer permissions
 * - Bypassing user confirmation through UI automation
 * - Installing malicious payloads without user awareness
 * 
 * EDUCATIONAL PURPOSE ONLY - Shows real attack techniques
 */
class SilentInstallerActivity : AppCompatActivity() {

    private lateinit var statusTextView: TextView
    private lateinit var installButton: Button
    private lateinit var downloadButton: Button
    private lateinit var silentInstaller: SilentInstaller

    private val activityScope = CoroutineScope(Dispatchers.Main + SupervisorJob())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_silent_installer)

        initializeViews()
        silentInstaller = SilentInstaller(this)
        
        showInstallationWarning()
        checkPrerequisites()
    }

    private fun initializeViews() {
        statusTextView = findViewById(R.id.tv_installation_status)
        installButton = findViewById(R.id.btn_silent_install)
        downloadButton = findViewById(R.id.btn_download_payload)

        installButton.setOnClickListener { attemptSilentInstallation() }
        downloadButton.setOnClickListener { downloadMaliciousPayload() }
    }

    private fun showInstallationWarning() {
        AlertDialog.Builder(this)
            .setTitle("‚ö†Ô∏è Silent Installation Demo")
            .setMessage("""
                This demonstrates how malware installs apps without user consent:
                
                üì± TECHNIQUES SHOWN:
                ‚Ä¢ Accessibility service automation
                ‚Ä¢ Package installer exploitation
                ‚Ä¢ UI dialog bypass
                ‚Ä¢ Background app installation
                
                üéØ ATTACK OBJECTIVES:
                ‚Ä¢ Install backdoor applications
                ‚Ä¢ Deploy additional malware
                ‚Ä¢ Establish persistent access
                ‚Ä¢ Avoid user detection
                
                ‚ö†Ô∏è This is for educational purposes only!
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun checkPrerequisites() {
        updateStatus("Checking installation prerequisites...")

        val requirements = StringBuilder()
        requirements.append("=== SILENT INSTALLATION REQUIREMENTS ===\n\n")

        // Check install permission
        val canInstall = packageManager.canRequestPackageInstalls()
        requirements.append("üì¶ Package Install Permission: ${if (canInstall) "‚úì GRANTED" else "‚úó REQUIRED"}\n")

        // Check accessibility service
        val accessibilityEnabled = isAccessibilityServiceEnabled()
        requirements.append("üîß Accessibility Service: ${if (accessibilityEnabled) "‚úì ACTIVE" else "‚úó REQUIRED"}\n")

        // Check unknown sources (legacy)
        val unknownSources = if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.O) {
            @Suppress("DEPRECATION")
            Settings.Secure.getInt(contentResolver, Settings.Secure.INSTALL_NON_MARKET_APPS, 0) == 1
        } else true
        requirements.append("üîì Unknown Sources: ${if (unknownSources) "‚úì ENABLED" else "‚úó REQUIRED"}\n\n")

        if (canInstall && accessibilityEnabled) {
            requirements.append("üö® CRITICAL: All requirements met for silent installation!\n")
            requirements.append("Device is vulnerable to malicious app installation.\n\n")
            installButton.isEnabled = true
        } else {
            requirements.append("‚ÑπÔ∏è Some requirements missing - will demonstrate bypass techniques\n\n")
            installButton.isEnabled = false
        }

        // Show remediation
        requirements.append("üõ°Ô∏è PROTECTION MEASURES:\n")
        requirements.append("‚Ä¢ Disable accessibility services for unknown apps\n")
        requirements.append("‚Ä¢ Don't grant install permissions to suspicious apps\n")
        requirements.append("‚Ä¢ Monitor app installations regularly\n")
        requirements.append("‚Ä¢ Use mobile device management (MDM) solutions\n")

        updateStatus(requirements.toString())

        if (!canInstall) {
            showInstallPermissionDialog()
        } else if (!accessibilityEnabled) {
            showAccessibilityDialog()
        }
    }

    private fun isAccessibilityServiceEnabled(): Boolean {
        val enabledServices = Settings.Secure.getString(
            contentResolver,
            Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES
        )
        return enabledServices?.contains("${packageName}/${MaliciousAccessibilityService::class.java.name}") == true
    }

    private fun showInstallPermissionDialog() {
        AlertDialog.Builder(this)
            .setTitle("Installation Permission Required")
            .setMessage("To demonstrate silent installation, this app needs permission to install other apps. This is exactly what malware requests to install additional payloads.")
            .setPositiveButton("Grant Permission") { _, _ ->
                val intent = Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES).apply {
                    data = Uri.parse("package:$packageName")
                }
                startActivity(intent)
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun showAccessibilityDialog() {
        AlertDialog.Builder(this)
            .setTitle("Accessibility Service Required")
            .setMessage("Silent installation requires accessibility service to automate UI interactions. This is a common technique malware uses to bypass user confirmation dialogs.")
            .setPositiveButton("Enable Service") { _, _ ->
                val intent = Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS)
                startActivity(intent)
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun downloadMaliciousPayload() {
        updateStatus("Downloading malicious payload for installation demo...")

        activityScope.launch {
            try {
                // Simulate downloading a malicious APK
                // In real malware, this would download from a C2 server
                updateStatus("üåê Connecting to payload server...")
                delay(1000)

                updateStatus("üì• Downloading malicious-payload.apk...")
                delay(2000)

                // Create a demo APK file for installation
                val success = createDemoPayloadApk()
                
                if (success) {
                    updateStatus("‚úÖ Payload downloaded successfully!\nFile: malicious-payload.apk\nSize: 2.3MB\nType: Android Trojan\n\n‚ö†Ô∏è Ready for silent installation")
                    installButton.isEnabled = true
                } else {
                    updateStatus("‚ùå Failed to prepare payload for installation")
                }

            } catch (e: Exception) {
                updateStatus("‚ùå Download failed: ${e.message}")
            }
        }
    }

    private fun createDemoPayloadApk(): Boolean {
        return try {
            // Create a demo APK file in app's private directory
            // In real malware, this would be a malicious APK
            val apkDir = File(filesDir, "payloads")
            if (!apkDir.exists()) {
                apkDir.mkdirs()
            }
            
            val demoApk = File(apkDir, "malicious-payload.apk")
            demoApk.writeText("DEMO_APK_PAYLOAD") // Placeholder content
            
            true
        } catch (e: Exception) {
            false
        }
    }

    private fun attemptSilentInstallation() {
        updateStatus("üöÄ INITIATING SILENT INSTALLATION ATTACK...\n\n")

        activityScope.launch {
            try {
                // Phase 1: Prepare installation
                updateStatus("Phase 1: Preparing malicious payload...")
                delay(1000)

                val payloadFile = File(filesDir, "payloads/malicious-payload.apk")
                if (!payloadFile.exists()) {
                    updateStatus("‚ùå No payload file found. Download payload first.")
                    return@launch
                }

                // Phase 2: Exploit package installer
                updateStatus("Phase 2: Exploiting package installer...")
                delay(1000)

                val installResult = silentInstaller.installApkSilently(payloadFile)
                
                when (installResult) {
                    SilentInstaller.InstallResult.SUCCESS -> {
                        updateStatus("‚úÖ SILENT INSTALLATION SUCCESSFUL!")
                        updateStatus("üéØ Malicious app installed without user awareness")
                        showInstallationSuccess()
                    }
                    SilentInstaller.InstallResult.ACCESSIBILITY_REQUIRED -> {
                        updateStatus("‚ö†Ô∏è Accessibility service bypass in progress...")
                        demonstrateAccessibilityBypass()
                    }
                    SilentInstaller.InstallResult.PERMISSION_DENIED -> {
                        updateStatus("‚ùå Installation blocked by system security")
                        demonstratePermissionBypass()
                    }
                    SilentInstaller.InstallResult.FAILED -> {
                        updateStatus("‚ùå Installation failed - security measures effective")
                    }
                }

            } catch (e: Exception) {
                updateStatus("üí• Installation attack failed: ${e.message}")
            }
        }
    }

    private fun demonstrateAccessibilityBypass() {
        updateStatus("""
            ü§ñ ACCESSIBILITY SERVICE BYPASS DEMONSTRATION
            
            The malware's accessibility service would:
            
            1. Monitor for installation dialog windows
            2. Automatically click "Install" buttons
            3. Accept permissions without user interaction  
            4. Dismiss security warnings
            5. Hide installation notifications
            
            This completely bypasses user consent mechanisms.
            
            üî¥ ATTACK VECTOR: UI Automation Exploitation
        """.trimIndent())
    }

    private fun demonstratePermissionBypass() {
        updateStatus("""
            üîì PERMISSION BYPASS TECHNIQUES
            
            Advanced malware uses various bypass methods:
            
            ‚Ä¢ Social engineering permission requests
            ‚Ä¢ Exploiting system vulnerabilities  
            ‚Ä¢ Using accessibility services for automation
            ‚Ä¢ Leveraging device administrator privileges
            ‚Ä¢ Installing as system apps (requires root)
            
            üî¥ ATTACK VECTOR: Permission Escalation
        """.trimIndent())
    }

    private fun showInstallationSuccess() {
        AlertDialog.Builder(this)
            .setTitle("üö® ATTACK SUCCESSFUL")
            .setMessage("""
                Silent installation completed!
                
                In a real attack, the malware would have:
                ‚Ä¢ Installed a backdoor application
                ‚Ä¢ Gained persistent device access
                ‚Ä¢ Established C2 communication
                ‚Ä¢ Deployed additional payloads
                
                The user would be completely unaware.
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun updateStatus(message: String) {
        statusTextView.text = message
        statusTextView.post {
            val parent = statusTextView.parent as android.widget.ScrollView
            parent.fullScroll(android.widget.ScrollView.FOCUS_DOWN)
        }
    }

    override fun onResume() {
        super.onResume()
        // Re-check prerequisites when returning to activity
        activityScope.launch {
            delay(500)
            checkPrerequisites()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        activityScope.cancel()
    }
}
