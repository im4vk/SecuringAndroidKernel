package com.securitydemo.malware.utils

import android.content.Context
import android.os.Handler
import android.os.Looper
import java.util.*

/**
 * SECURITY DEMO: Psychological Manipulation Utilities
 * 
 * This class demonstrates psychological principles used in social engineering:
 * - Authority bias (trusting official-looking sources)
 * - Urgency manipulation (creating false time pressure)
 * - Fear appeals (exploiting security concerns)
 * - Social proof (using testimonials and user counts)
 * - Commitment consistency (getting small agreements first)
 * - Scarcity principle (limited time offers)
 * 
 * EDUCATIONAL PURPOSE ONLY - Understanding these helps defend against them
 */
class PsychologicalManipulation(private val context: Context) {

    companion object {
        // Common psychological triggers used in social engineering
        val AUTHORITY_PHRASES = arrayOf(
            "Official System Notice",
            "Security Alert from Android",
            "Government Security Directive", 
            "IT Administrator Request",
            "Authorized by Google Security",
            "Department of Homeland Security",
            "FBI Cybercrime Division",
            "Microsoft Security Team"
        )

        val URGENCY_PHRASES = arrayOf(
            "IMMEDIATE ACTION REQUIRED",
            "Time Sensitive - Act Now",
            "Only 30 seconds remaining",
            "Expires in 5 minutes",
            "Critical deadline approaching",
            "Emergency response needed",
            "Act before it's too late",
            "Last chance to secure"
        )

        val FEAR_TRIGGERS = arrayOf(
            "Your device has been compromised",
            "Hackers are accessing your data",
            "Identity theft in progress",
            "Bank account being drained",
            "Personal photos being stolen",
            "Location being tracked by criminals",
            "Credit cards being cloned",
            "Family members at risk"
        )

        val SOCIAL_PROOF_STATEMENTS = arrayOf(
            "Over 10 million users protected",
            "Recommended by security experts",
            "Trusted by Fortune 500 companies",
            "Winner of cybersecurity awards",
            "Used by government agencies",
            "Endorsed by tech professionals",
            "5-star rated security solution",
            "Chosen by privacy advocates"
        )

        val COMMITMENT_STARTERS = arrayOf(
            "Do you want to protect your family?",
            "Are you concerned about privacy?",
            "Do you value your personal data?",
            "Would you like better security?",
            "Is your device important to you?",
            "Do you want peace of mind?",
            "Are you a responsible device owner?",
            "Do you care about your reputation?"
        )

        val SCARCITY_MOTIVATORS = arrayOf(
            "Limited time security update",
            "Exclusive protection offer",
            "One-time opportunity",
            "Available for next 24 hours only",
            "Special emergency patch",
            "Reserved for premium users",
            "Last few security licenses",
            "Temporary free upgrade"
        )
    }

    /**
     * Generate authoritative-sounding message
     */
    fun generateAuthorityMessage(): String {
        val authority = AUTHORITY_PHRASES.random()
        val action = arrayOf("requires", "mandates", "directs", "orders", "authorizes").random()
        return "$authority $action immediate compliance with security protocols."
    }

    /**
     * Create urgency-based message with countdown
     */
    fun generateUrgencyMessage(timeLeft: Int = 30): String {
        val urgency = URGENCY_PHRASES.random()
        val consequence = FEAR_TRIGGERS.random()
        return "$urgency\n\nTime remaining: ${timeLeft}s\n\nIf you don't act now: $consequence"
    }

    /**
     * Generate fear-based security warning
     */
    fun generateFearMessage(): String {
        val threat = FEAR_TRIGGERS.random()
        val consequence = arrayOf(
            "All your personal data will be stolen",
            "Your identity will be sold on dark web",
            "Your bank accounts will be emptied",
            "Your reputation will be destroyed",
            "Your family's safety will be compromised",
            "Your device will be permanently damaged"
        ).random()
        
        return "WARNING: $threat\n\nConsequences: $consequence\n\nProtect yourself immediately!"
    }

    /**
     * Create social proof statement
     */
    fun generateSocialProofMessage(): String {
        val proof = SOCIAL_PROOF_STATEMENTS.random()
        val statistic = arrayOf(
            "99.9% effective against malware",
            "Blocks 100% of known threats",
            "Protects against 50,000+ viruses",
            "Prevents 95% of data breaches",
            "Stops 99% of phishing attempts",
            "Secured over 1 billion devices"
        ).random()
        
        return "$proof\n\nProven results: $statistic\n\nJoin millions of protected users today!"
    }

    /**
     * Generate commitment building question
     */
    fun generateCommitmentQuestion(): String {
        val question = COMMITMENT_STARTERS.random()
        val followup = arrayOf(
            "Then you need maximum protection.",
            "Security should be your top priority.",
            "Don't leave yourself vulnerable.",
            "Take action to protect what matters.",
            "Invest in your digital safety.",
            "Make the smart security choice."
        ).random()
        
        return "$question\n\n$followup"
    }

    /**
     * Create scarcity-based offer
     */
    fun generateScarcityOffer(): String {
        val offer = SCARCITY_MOTIVATORS.random()
        val benefit = arrayOf(
            "Premium security features unlocked",
            "Advanced threat detection enabled", 
            "Real-time protection activated",
            "Military-grade encryption applied",
            "Zero-day exploit protection",
            "AI-powered threat analysis"
        ).random()
        
        return "$offer\n\nExclusive benefit: $benefit\n\nDon't miss this opportunity!"
    }

    /**
     * Combine multiple psychological triggers for maximum effect
     */
    fun generateCombinedAttack(): String {
        val authority = generateAuthorityMessage()
        val fear = generateFearMessage()
        val urgency = "URGENT: You have 60 seconds to respond"
        val social = "Join 50 million users who stayed protected"
        
        return """
            $authority
            
            $fear
            
            $urgency
            
            $social
            
            Click "Accept" to activate emergency protection now!
        """.trimIndent()
    }

    /**
     * Generate fake testimonial
     */
    fun generateFakeTestimonial(): String {
        val names = arrayOf("Sarah M.", "John D.", "Lisa K.", "Mike R.", "Anna W.", "David L.")
        val locations = arrayOf("New York", "California", "Texas", "Florida", "Illinois", "Ohio")
        val occupations = arrayOf(
            "Software Engineer", "Teacher", "Business Owner", "Student", 
            "Nurse", "Manager", "Consultant", "Designer"
        )
        
        val name = names.random()
        val location = locations.random()
        val job = occupations.random()
        
        val testimonials = arrayOf(
            "This app saved my device from a major virus attack!",
            "I almost lost all my photos until this protected me.",
            "My bank account was being hacked - this stopped it!",
            "Best security app I've ever used. Highly recommend!",
            "Protected my entire family's devices perfectly.",
            "Caught threats that other apps missed completely."
        )
        
        return "\"${testimonials.random()}\"\n\n- $name, $job from $location"
    }

    /**
     * Generate fake system notification
     */
    fun generateSystemNotification(): String {
        val systemComponents = arrayOf(
            "Android Security Manager",
            "System Update Service", 
            "Security Policy Engine",
            "Threat Detection System",
            "Device Protection Service",
            "Security Configuration Manager"
        )
        
        val actions = arrayOf(
            "requires immediate attention",
            "has detected a critical issue", 
            "needs emergency configuration",
            "must be updated immediately",
            "requires security validation",
            "needs threat remediation"
        )
        
        val component = systemComponents.random()
        val action = actions.random()
        
        return "System Notice: $component $action.\n\nUser action required to maintain device security."
    }

    /**
     * Analyze psychological vulnerability based on user response patterns
     */
    fun analyzeVulnerability(responses: Map<String, Boolean>): String {
        val vulnerabilities = mutableListOf<String>()
        
        if (responses["authority"] == true) {
            vulnerabilities.add("Authority bias - trusts official-looking messages")
        }
        
        if (responses["urgency"] == true) {
            vulnerabilities.add("Urgency manipulation - acts hastily under pressure")
        }
        
        if (responses["fear"] == true) {
            vulnerabilities.add("Fear appeals - motivated by security threats")
        }
        
        if (responses["social_proof"] == true) {
            vulnerabilities.add("Social proof susceptibility - influenced by others")
        }
        
        if (responses["scarcity"] == true) {
            vulnerabilities.add("Scarcity pressure - fears missing opportunities")
        }
        
        return if (vulnerabilities.isEmpty()) {
            "Low vulnerability - strong resistance to manipulation"
        } else {
            "Vulnerabilities detected:\n${vulnerabilities.joinToString("\n• ", "• ")}"
        }
    }

    /**
     * Generate defense recommendations based on vulnerabilities
     */
    fun generateDefenseRecommendations(vulnerabilities: List<String>): String {
        val recommendations = mutableListOf<String>()
        
        recommendations.add("🛡️ SOCIAL ENGINEERING DEFENSE TIPS:")
        recommendations.add("")
        recommendations.add("✓ Always verify unexpected security warnings")
        recommendations.add("✓ Check update sources through official channels")
        recommendations.add("✓ Take time to think before granting permissions")
        recommendations.add("✓ Question urgent requests for action")
        recommendations.add("✓ Verify authority before complying with requests")
        recommendations.add("✓ Don't let fear override careful decision-making")
        recommendations.add("✓ Research before installing security software")
        recommendations.add("✓ Trust your instincts if something feels wrong")
        recommendations.add("")
        recommendations.add("Remember: Attackers exploit human psychology more than technical vulnerabilities!")
        
        return recommendations.joinToString("\n")
    }
}
