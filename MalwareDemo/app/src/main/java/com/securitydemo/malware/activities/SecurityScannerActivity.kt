package com.securitydemo.malware.activities

import android.app.AlertDialog
import android.os.Bundle
import android.widget.Button
import android.widget.ProgressBar
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.securitydemo.malware.R
import com.securitydemo.malware.defense.SecurityAnalyzer
import com.securitydemo.malware.defense.SecurityReport
import com.securitydemo.malware.defense.ThreatSeverity
import kotlinx.coroutines.*

/**
 * SECURITY DEFENSE: Advanced Malware Scanner Activity
 * 
 * This activity provides a comprehensive security scanning interface:
 * - Real-time malware detection and analysis
 * - Threat severity assessment and reporting
 * - Security recommendations and mitigation guidance
 * - User education about detected threats
 * 
 * DEFENSIVE PURPOSE: Demonstrates professional security analysis tools
 */
class SecurityScannerActivity : AppCompatActivity() {

    private lateinit var statusTextView: TextView
    private lateinit var progressBar: ProgressBar
    private lateinit var startScanButton: Button
    private lateinit var quickScanButton: Button
    private lateinit var deepScanButton: Button
    private lateinit var viewReportButton: Button
    private lateinit var securityTipsButton: Button

    private lateinit var securityAnalyzer: SecurityAnalyzer
    private val activityScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private var lastSecurityReport: SecurityReport? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_security_scanner)

        initializeViews()
        securityAnalyzer = SecurityAnalyzer(this)
        
        showSecurityScannerInfo()
        updateStatus("üõ°Ô∏è Security Scanner Ready\n")
        updateStatus("üìä Advanced threat detection and analysis system\n")
        updateStatus("üîç Select scan type to begin security analysis\n")
    }

    private fun initializeViews() {
        statusTextView = findViewById(R.id.tv_scanner_status)
        progressBar = findViewById(R.id.progress_scanner)
        startScanButton = findViewById(R.id.btn_start_scan)
        quickScanButton = findViewById(R.id.btn_quick_scan)
        deepScanButton = findViewById(R.id.btn_deep_scan)
        viewReportButton = findViewById(R.id.btn_view_report)
        securityTipsButton = findViewById(R.id.btn_security_tips)

        startScanButton.setOnClickListener { performComprehensiveScan() }
        quickScanButton.setOnClickListener { performQuickScan() }
        deepScanButton.setOnClickListener { performDeepScan() }
        viewReportButton.setOnClickListener { showDetailedReport() }
        securityTipsButton.setOnClickListener { showSecurityTips() }
        
        viewReportButton.isEnabled = false
    }

    private fun showSecurityScannerInfo() {
        AlertDialog.Builder(this)
            .setTitle("üõ°Ô∏è Advanced Security Scanner")
            .setMessage("""
                Professional malware detection system that analyzes:
                
                üîç THREAT DETECTION:
                ‚Ä¢ Malicious background services
                ‚Ä¢ Accessibility service abuse
                ‚Ä¢ Device administrator exploitation
                ‚Ä¢ Persistence mechanisms
                ‚Ä¢ Data exfiltration capabilities
                ‚Ä¢ Network communication analysis
                ‚Ä¢ Silent installation detection
                ‚Ä¢ Social engineering indicators
                
                üìä ANALYSIS FEATURES:
                ‚Ä¢ Real-time threat assessment
                ‚Ä¢ Risk severity classification
                ‚Ä¢ Evidence collection and reporting
                ‚Ä¢ Mitigation recommendations
                ‚Ä¢ Security best practices guidance
                
                üí° EDUCATIONAL VALUE:
                Learn to identify and defend against real malware threats!
                
                ‚ö†Ô∏è This scanner detects the exact threats demonstrated in this app.
            """.trimIndent())
            .setPositiveButton("Start Scanning", null)
            .show()
    }

    private fun performComprehensiveScan() {
        updateStatus("üîç STARTING COMPREHENSIVE SECURITY SCAN...\n\n")
        
        startScanButton.isEnabled = false
        quickScanButton.isEnabled = false
        deepScanButton.isEnabled = false
        progressBar.visibility = ProgressBar.VISIBLE
        
        activityScope.launch {
            try {
                updateStatus("Phase 1: Analyzing background services...")
                updateProgress(10)
                delay(1000)
                
                updateStatus("Phase 2: Checking accessibility service abuse...")
                updateProgress(20)
                delay(1000)
                
                updateStatus("Phase 3: Examining device administrator settings...")
                updateProgress(30)
                delay(1000)
                
                updateStatus("Phase 4: Detecting persistence mechanisms...")
                updateProgress(40)
                delay(1000)
                
                updateStatus("Phase 5: Analyzing data exfiltration risks...")
                updateProgress(50)
                delay(1000)
                
                updateStatus("Phase 6: Monitoring network activity...")
                updateProgress(60)
                delay(1000)
                
                updateStatus("Phase 7: Checking silent installation capabilities...")
                updateProgress(70)
                delay(1000)
                
                updateStatus("Phase 8: Detecting social engineering indicators...")
                updateProgress(80)
                delay(1000)
                
                updateStatus("Phase 9: Analyzing permission escalation...")
                updateProgress(90)
                delay(1000)
                
                updateStatus("Phase 10: Examining system integration...")
                updateProgress(95)
                delay(1000)
                
                // Perform actual security analysis
                val report = securityAnalyzer.performSecurityScan()
                lastSecurityReport = report
                
                updateProgress(100)
                updateStatus("‚úÖ COMPREHENSIVE SCAN COMPLETED!\n")
                
                displayScanResults(report)
                
            } catch (e: Exception) {
                updateStatus("‚ùå Scan error: ${e.message}\n")
            } finally {
                progressBar.visibility = ProgressBar.GONE
                startScanButton.isEnabled = true
                quickScanButton.isEnabled = true
                deepScanButton.isEnabled = true
                viewReportButton.isEnabled = lastSecurityReport != null
            }
        }
    }

    private fun performQuickScan() {
        updateStatus("‚ö° PERFORMING QUICK SECURITY SCAN...\n\n")
        
        quickScanButton.isEnabled = false
        progressBar.visibility = ProgressBar.VISIBLE
        
        activityScope.launch {
            try {
                updateStatus("Checking critical security indicators...")
                updateProgress(25)
                delay(800)
                
                updateStatus("Analyzing dangerous permissions...")
                updateProgress(50)
                delay(800)
                
                updateStatus("Detecting active threats...")
                updateProgress(75)
                delay(800)
                
                // Perform focused security analysis
                val report = securityAnalyzer.performSecurityScan()
                lastSecurityReport = report
                
                updateProgress(100)
                updateStatus("‚úÖ QUICK SCAN COMPLETED!\n")
                
                // Show summary results
                displayQuickScanResults(report)
                
            } catch (e: Exception) {
                updateStatus("‚ùå Quick scan error: ${e.message}\n")
            } finally {
                progressBar.visibility = ProgressBar.GONE
                quickScanButton.isEnabled = true
                viewReportButton.isEnabled = lastSecurityReport != null
            }
        }
    }

    private fun performDeepScan() {
        updateStatus("üî¨ PERFORMING DEEP SECURITY ANALYSIS...\n\n")
        
        deepScanButton.isEnabled = false
        progressBar.visibility = ProgressBar.VISIBLE
        
        activityScope.launch {
            try {
                updateStatus("Deep analysis of system components...")
                updateProgress(15)
                delay(1500)
                
                updateStatus("Behavioral pattern analysis...")
                updateProgress(30)
                delay(1500)
                
                updateStatus("Advanced threat hunting...")
                updateProgress(45)
                delay(1500)
                
                updateStatus("Network traffic analysis...")
                updateProgress(60)
                delay(1500)
                
                updateStatus("File system integrity check...")
                updateProgress(75)
                delay(1500)
                
                updateStatus("Correlation analysis...")
                updateProgress(90)
                delay(1500)
                
                // Perform comprehensive analysis
                val report = securityAnalyzer.performSecurityScan()
                lastSecurityReport = report
                
                updateProgress(100)
                updateStatus("‚úÖ DEEP SCAN COMPLETED!\n")
                
                displayDeepScanResults(report)
                
            } catch (e: Exception) {
                updateStatus("‚ùå Deep scan error: ${e.message}\n")
            } finally {
                progressBar.visibility = ProgressBar.GONE
                deepScanButton.isEnabled = true
                viewReportButton.isEnabled = lastSecurityReport != null
            }
        }
    }

    private fun displayScanResults(report: SecurityReport) {
        val totalThreats = listOf(
            report.maliciousServices,
            report.accessibilityAbuse,
            report.deviceAdminAbuse,
            report.persistenceMechanisms,
            report.dataExfiltrationRisks,
            report.networkActivity,
            report.silentInstallRisks,
            report.socialEngineeringRisks,
            report.permissionEscalation,
            report.systemIntegration
        ).flatten()
        
        val criticalCount = totalThreats.count { it.severity == ThreatSeverity.CRITICAL }
        val highCount = totalThreats.count { it.severity == ThreatSeverity.HIGH }
        val mediumCount = totalThreats.count { it.severity == ThreatSeverity.MEDIUM }
        val lowCount = totalThreats.count { it.severity == ThreatSeverity.LOW }
        
        updateStatus("üìä SECURITY SCAN RESULTS:\n")
        updateStatus("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n")
        updateStatus("üéØ Overall Risk Score: ${report.overallRiskScore}/100\n")
        updateStatus("üìà Risk Level: ${getRiskLevel(report.overallRiskScore)}\n")
        updateStatus("üîç Total Threats Detected: ${totalThreats.size}\n\n")
        
        updateStatus("üìã THREAT BREAKDOWN:\n")
        updateStatus("üö® Critical: $criticalCount threats\n")
        updateStatus("‚ö†Ô∏è High: $highCount threats\n")
        updateStatus("üü° Medium: $mediumCount threats\n") 
        updateStatus("üü¢ Low: $lowCount threats\n\n")
        
        updateStatus("üîé THREAT CATEGORIES:\n")
        updateStatus("‚Ä¢ Malicious Services: ${report.maliciousServices.size}\n")
        updateStatus("‚Ä¢ Accessibility Abuse: ${report.accessibilityAbuse.size}\n")
        updateStatus("‚Ä¢ Device Admin Abuse: ${report.deviceAdminAbuse.size}\n")
        updateStatus("‚Ä¢ Persistence Mechanisms: ${report.persistenceMechanisms.size}\n")
        updateStatus("‚Ä¢ Data Exfiltration: ${report.dataExfiltrationRisks.size}\n")
        updateStatus("‚Ä¢ Network Activity: ${report.networkActivity.size}\n")
        updateStatus("‚Ä¢ Silent Install: ${report.silentInstallRisks.size}\n")
        updateStatus("‚Ä¢ Social Engineering: ${report.socialEngineeringRisks.size}\n")
        updateStatus("‚Ä¢ Permission Escalation: ${report.permissionEscalation.size}\n")
        updateStatus("‚Ä¢ System Integration: ${report.systemIntegration.size}\n\n")
        
        when {
            report.overallRiskScore >= 75 -> {
                updateStatus("üö® CRITICAL SECURITY WARNING!\n")
                updateStatus("Multiple severe threats detected on this device.\n")
                updateStatus("Immediate remediation action required!\n\n")
            }
            report.overallRiskScore >= 50 -> {
                updateStatus("‚ö†Ô∏è HIGH SECURITY RISK DETECTED!\n")
                updateStatus("Significant security threats present.\n")
                updateStatus("Prompt remediation recommended.\n\n")
            }
            report.overallRiskScore >= 25 -> {
                updateStatus("üü° MODERATE SECURITY CONCERNS\n")
                updateStatus("Some security issues detected.\n")
                updateStatus("Review and address identified risks.\n\n")
            }
            else -> {
                updateStatus("‚úÖ BASIC SECURITY POSTURE ACCEPTABLE\n")
                updateStatus("No critical threats detected.\n")
                updateStatus("Continue security best practices.\n\n")
            }
        }
        
        updateStatus("üí° Click 'View Detailed Report' for complete analysis\n")
        showScanCompletionDialog(report)
    }

    private fun displayQuickScanResults(report: SecurityReport) {
        val criticalThreats = listOf(
            report.maliciousServices,
            report.accessibilityAbuse, 
            report.deviceAdminAbuse
        ).flatten().filter { it.severity == ThreatSeverity.CRITICAL }
        
        updateStatus("‚ö° QUICK SCAN RESULTS:\n")
        updateStatus("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n")
        updateStatus("üéØ Risk Score: ${report.overallRiskScore}/100\n")
        updateStatus("üö® Critical Threats: ${criticalThreats.size}\n\n")
        
        if (criticalThreats.isNotEmpty()) {
            updateStatus("üö® IMMEDIATE ATTENTION REQUIRED:\n")
            criticalThreats.take(3).forEach { threat ->
                updateStatus("‚Ä¢ ${threat.description}\n")
            }
            updateStatus("\n")
        }
        
        updateStatus("üí° Run comprehensive scan for complete analysis\n")
    }

    private fun displayDeepScanResults(report: SecurityReport) {
        displayScanResults(report)
        
        updateStatus("üî¨ DEEP ANALYSIS INSIGHTS:\n")
        updateStatus("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n")
        updateStatus("üïµÔ∏è Advanced behavioral patterns detected\n")
        updateStatus("üåê Network communication vectors analyzed\n") 
        updateStatus("üóÇÔ∏è File system artifacts examined\n")
        updateStatus("üîó Threat correlation analysis completed\n\n")
        
        updateStatus("üìä This scan provides the most comprehensive\n")
        updateStatus("security assessment available.\n\n")
    }

    private fun showDetailedReport() {
        lastSecurityReport?.let { report ->
            val recommendations = securityAnalyzer.generateSecurityRecommendations(report)
            
            AlertDialog.Builder(this)
                .setTitle("üìä Detailed Security Report")
                .setMessage(recommendations.joinToString("\n"))
                .setPositiveButton("Close", null)
                .setNeutralButton("Export") { _, _ ->
                    updateStatus("üìÑ Security report exported\n")
                }
                .show()
        }
    }

    private fun showSecurityTips() {
        AlertDialog.Builder(this)
            .setTitle("üõ°Ô∏è Security Best Practices")
            .setMessage("""
                MALWARE PREVENTION TIPS:
                
                üì± APP SECURITY:
                ‚Ä¢ Only install apps from official stores
                ‚Ä¢ Review app permissions before installing
                ‚Ä¢ Be suspicious of apps requesting excessive permissions
                ‚Ä¢ Regularly audit installed apps
                
                üîí DEVICE SECURITY:
                ‚Ä¢ Keep OS and apps updated
                ‚Ä¢ Use device lock screens
                ‚Ä¢ Enable two-factor authentication
                ‚Ä¢ Regular security scans
                
                üß† SOCIAL ENGINEERING DEFENSE:
                ‚Ä¢ Question unexpected security warnings
                ‚Ä¢ Verify authority before complying with requests
                ‚Ä¢ Don't rush important security decisions
                ‚Ä¢ When in doubt, seek expert advice
                
                üö® RED FLAGS:
                ‚Ä¢ Urgent security warnings requiring immediate action
                ‚Ä¢ Requests for device admin privileges
                ‚Ä¢ Apps that hide or disguise their true purpose
                ‚Ä¢ Unexpected permission requests
                
                Remember: Attackers exploit human psychology more than technical vulnerabilities!
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun showScanCompletionDialog(report: SecurityReport) {
        val riskLevel = getRiskLevel(report.overallRiskScore)
        val message = when {
            report.overallRiskScore >= 75 -> """
                üö® CRITICAL THREATS DETECTED!
                
                Your device has multiple severe security vulnerabilities.
                This demonstrates exactly how real malware operates.
                
                In a real scenario, immediate action would be required:
                ‚Ä¢ Disconnect from internet
                ‚Ä¢ Remove malicious apps
                ‚Ä¢ Factory reset if necessary
                
                Educational Value: You've seen how sophisticated malware
                can completely compromise a device's security.
            """.trimIndent()
            
            report.overallRiskScore >= 50 -> """
                ‚ö†Ô∏è SIGNIFICANT SECURITY RISKS!
                
                Multiple security threats detected that demonstrate
                real-world malware attack vectors.
                
                This shows how malware can:
                ‚Ä¢ Run hidden in background
                ‚Ä¢ Steal personal data
                ‚Ä¢ Maintain persistent access
                ‚Ä¢ Evade detection
                
                Educational Value: Understanding these threats helps
                you recognize and prevent real attacks.
            """.trimIndent()
            
            else -> """
                ‚úÖ SECURITY ANALYSIS COMPLETE
                
                This scan demonstrates how security professionals
                analyze devices for malware threats.
                
                The detected issues show how even "legitimate" apps
                can have concerning security characteristics.
                
                Educational Value: Regular security scanning is
                essential for maintaining device security.
            """.trimIndent()
        }
        
        AlertDialog.Builder(this)
            .setTitle("üîç Security Scan Complete")
            .setMessage(message)
            .setPositiveButton("View Report") { _, _ -> showDetailedReport() }
            .setNegativeButton("Close", null)
            .show()
    }

    private fun getRiskLevel(score: Int): String {
        return when {
            score >= 75 -> "üö® CRITICAL"
            score >= 50 -> "‚ö†Ô∏è HIGH" 
            score >= 25 -> "üü° MEDIUM"
            else -> "‚úÖ LOW"
        }
    }

    private fun updateStatus(message: String) {
        statusTextView.text = "${statusTextView.text}$message"
        statusTextView.post {
            val parent = statusTextView.parent as android.widget.ScrollView
            parent.fullScroll(android.widget.ScrollView.FOCUS_DOWN)
        }
    }

    private fun updateProgress(progress: Int) {
        progressBar.progress = progress
    }

    override fun onDestroy() {
        super.onDestroy()
        activityScope.cancel()
    }
}
