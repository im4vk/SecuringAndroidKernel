package com.securitydemo.malware.activities

import android.app.AlertDialog
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.securitydemo.malware.R
import com.securitydemo.malware.services.PersistenceManager
import kotlinx.coroutines.*

/**
 * SECURITY DEMO: Persistence Demonstration Activity
 * 
 * This activity demonstrates how malware achieves persistence:
 * - Multiple restart mechanisms
 * - Battery optimization bypass
 * - Component resurrection
 * - Self-healing capabilities
 * - System integration techniques
 * 
 * EDUCATIONAL PURPOSE ONLY - Shows real persistence techniques
 */
class PersistenceActivity : AppCompatActivity() {

    private lateinit var statusTextView: TextView
    private lateinit var initializePersistenceButton: Button
    private lateinit var testPersistenceButton: Button
    private lateinit var bypassBatteryOptButton: Button
    private lateinit var forceRestartButton: Button
    private lateinit var showReportButton: Button

    private lateinit var persistenceManager: PersistenceManager
    private val activityScope = CoroutineScope(Dispatchers.Main + SupervisorJob())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_persistence)

        initializeViews()
        persistenceManager = PersistenceManager(this)
        
        showPersistenceWarning()
        checkPersistenceStatus()
    }

    private fun initializeViews() {
        statusTextView = findViewById(R.id.tv_persistence_status)
        initializePersistenceButton = findViewById(R.id.btn_initialize_persistence)
        testPersistenceButton = findViewById(R.id.btn_test_persistence)
        bypassBatteryOptButton = findViewById(R.id.btn_bypass_battery)
        forceRestartButton = findViewById(R.id.btn_force_restart)
        showReportButton = findViewById(R.id.btn_show_report)

        initializePersistenceButton.setOnClickListener { initializePersistence() }
        testPersistenceButton.setOnClickListener { testPersistenceMechanisms() }
        bypassBatteryOptButton.setOnClickListener { requestBatteryOptimizationBypass() }
        forceRestartButton.setOnClickListener { forceRestartComponents() }
        showReportButton.setOnClickListener { showPersistenceReport() }
    }

    private fun showPersistenceWarning() {
        AlertDialog.Builder(this)
            .setTitle("‚ö†Ô∏è Persistence Mechanisms Demo")
            .setMessage("""
                This demonstrates how malware achieves persistence:
                
                üîÑ PERSISTENCE TECHNIQUES:
                ‚Ä¢ Multiple restart mechanisms
                ‚Ä¢ Boot receiver activation
                ‚Ä¢ Job scheduler exploitation
                ‚Ä¢ WorkManager abuse
                ‚Ä¢ Watchdog service monitoring
                ‚Ä¢ Component resurrection
                ‚Ä¢ Battery optimization bypass
                
                üéØ ATTACK OBJECTIVES:
                ‚Ä¢ Survive device reboots
                ‚Ä¢ Resist user termination attempts
                ‚Ä¢ Recover from system optimizations
                ‚Ä¢ Maintain long-term access
                ‚Ä¢ Avoid detection and removal
                
                ‚ö†Ô∏è This is for educational purposes only!
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun checkPersistenceStatus() {
        updateStatus("üîç PERSISTENCE SYSTEM ANALYSIS\n\n")
        
        activityScope.launch {
            val report = persistenceManager.getPersistenceReport()
            updateStatus(report)
            
            updateStatus("\nüí° Ready to demonstrate persistence techniques")
        }
    }

    private fun initializePersistence() {
        updateStatus("üöÄ INITIALIZING ADVANCED PERSISTENCE...\n\n")
        
        activityScope.launch {
            try {
                updateStatus("Phase 1: Activating boot persistence mechanisms...")
                delay(1000)
                
                updateStatus("Phase 2: Setting up job scheduler persistence...")
                delay(1000)
                
                updateStatus("Phase 3: Configuring WorkManager persistence...")
                delay(1000)
                
                updateStatus("Phase 4: Deploying watchdog services...")
                delay(1000)
                
                updateStatus("Phase 5: Enabling component resurrection...")
                delay(1000)
                
                updateStatus("Phase 6: Setting up system integration...")
                delay(1000)
                
                // Initialize persistence manager
                persistenceManager.initializePersistence()
                
                updateStatus("‚úÖ PERSISTENCE INITIALIZATION COMPLETED!")
                updateStatus("üéØ Malware now has multiple survival mechanisms")
                updateStatus("üîÑ Will survive reboots, app updates, and termination attempts")
                updateStatus("\nüö® MAXIMUM PERSISTENCE LEVEL ACHIEVED!")
                
                showPersistenceSuccess()
                
            } catch (e: Exception) {
                updateStatus("‚ùå Persistence initialization error: ${e.message}")
            }
        }
    }

    private fun testPersistenceMechanisms() {
        updateStatus("üß™ TESTING PERSISTENCE MECHANISMS...\n\n")
        
        activityScope.launch {
            try {
                updateStatus("Test 1: Checking service auto-restart capability...")
                delay(1000)
                
                // Simulate service termination and restart
                updateStatus("‚Ä¢ Terminating stealth service...")
                // Note: In real testing, services would be actually stopped and restarted
                delay(1500)
                
                updateStatus("‚Ä¢ Watchdog detected termination")
                updateStatus("‚Ä¢ Auto-restart mechanism triggered")
                updateStatus("‚úÖ Service successfully restarted")
                
                delay(1000)
                updateStatus("\nTest 2: Verifying boot receiver status...")
                delay(1000)
                updateStatus("‚úÖ Boot receiver is active and will restart malware on reboot")
                
                delay(1000)
                updateStatus("\nTest 3: Checking job scheduler persistence...")
                delay(1000)
                updateStatus("‚úÖ Multiple scheduled jobs active for periodic execution")
                
                delay(1000)
                updateStatus("\nTest 4: Testing component resurrection...")
                delay(1000)
                updateStatus("‚úÖ Self-healing mechanisms operational")
                
                updateStatus("\nüéØ PERSISTENCE TEST RESULTS:")
                updateStatus("‚Ä¢ Auto-restart: ‚úÖ FUNCTIONAL")
                updateStatus("‚Ä¢ Boot persistence: ‚úÖ FUNCTIONAL") 
                updateStatus("‚Ä¢ Job scheduler: ‚úÖ FUNCTIONAL")
                updateStatus("‚Ä¢ Component healing: ‚úÖ FUNCTIONAL")
                updateStatus("‚Ä¢ Watchdog monitoring: ‚úÖ FUNCTIONAL")
                
                updateStatus("\nüö® PERSISTENCE MECHANISMS FULLY OPERATIONAL!")
                
            } catch (e: Exception) {
                updateStatus("‚ùå Persistence test error: ${e.message}")
            }
        }
    }

    private fun requestBatteryOptimizationBypass() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            val powerManager = getSystemService(POWER_SERVICE) as android.os.PowerManager
            
            if (!powerManager.isIgnoringBatteryOptimizations(packageName)) {
                AlertDialog.Builder(this)
                    .setTitle("Battery Optimization Bypass")
                    .setMessage("""
                        This demonstrates how malware tries to bypass battery optimization:
                        
                        ‚Ä¢ Malware requests to be whitelisted from battery optimization
                        ‚Ä¢ This prevents the system from killing background services
                        ‚Ä¢ Real malware uses social engineering to trick users
                        ‚Ä¢ They claim it's for "enhanced performance" or "security"
                        
                        This is a critical persistence technique!
                    """.trimIndent())
                    .setPositiveButton("Show Settings") { _, _ ->
                        try {
                            val intent = Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS).apply {
                                data = Uri.parse("package:$packageName")
                            }
                            startActivity(intent)
                        } catch (e: Exception) {
                            // Fallback to general battery optimization settings
                            val intent = Intent(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS)
                            startActivity(intent)
                        }
                    }
                    .setNegativeButton("Cancel", null)
                    .show()
            } else {
                updateStatus("‚úÖ Battery optimization already bypassed!")
                updateStatus("üéØ Malware services protected from system termination")
            }
        } else {
            updateStatus("‚ÑπÔ∏è Battery optimization not applicable on this Android version")
        }
    }

    private fun forceRestartComponents() {
        updateStatus("üîÑ FORCE RESTARTING ALL MALWARE COMPONENTS...\n\n")
        
        activityScope.launch {
            try {
                updateStatus("Stopping all services...")
                delay(1000)
                
                updateStatus("Clearing component states...")
                delay(1000)
                
                updateStatus("Triggering resurrection mechanisms...")
                delay(1000)
                
                // Force restart through persistence manager
                persistenceManager.forceRestartAllComponents()
                
                updateStatus("Re-initializing persistence systems...")
                delay(1500)
                
                updateStatus("‚úÖ ALL COMPONENTS RESTARTED SUCCESSFULLY!")
                updateStatus("üéØ Malware has recovered from termination attempt")
                updateStatus("üîÑ All services and persistence mechanisms restored")
                
                updateStatus("\nüö® TERMINATION RESISTANCE DEMONSTRATED!")
                updateStatus("Real malware uses these techniques to survive:")
                updateStatus("‚Ä¢ Force-stop attempts by users")
                updateStatus("‚Ä¢ System optimization processes")
                updateStatus("‚Ä¢ Battery management systems")
                updateStatus("‚Ä¢ Security software cleanup attempts")
                
            } catch (e: Exception) {
                updateStatus("‚ùå Force restart error: ${e.message}")
            }
        }
    }

    private fun showPersistenceReport() {
        activityScope.launch {
            val report = persistenceManager.getPersistenceReport()
            
            AlertDialog.Builder(this@PersistenceActivity)
                .setTitle("üìä Persistence Status Report")
                .setMessage(report)
                .setPositiveButton("Close", null)
                .setNeutralButton("Export") { _, _ ->
                    // In a real implementation, this would export the report
                    updateStatus("üìÑ Persistence report exported")
                }
                .show()
        }
    }

    private fun showPersistenceSuccess() {
        AlertDialog.Builder(this)
            .setTitle("üéØ PERSISTENCE ACTIVATED")
            .setMessage("""
                Advanced persistence mechanisms are now active!
                
                SURVIVAL CAPABILITIES:
                ‚Ä¢ Automatic restart after termination
                ‚Ä¢ Recovery from system reboots
                ‚Ä¢ Resistance to battery optimization
                ‚Ä¢ Self-healing when components disabled
                ‚Ä¢ Multiple redundant restart mechanisms
                ‚Ä¢ System integration for camouflage
                
                ATTACK SCENARIO:
                ‚Ä¢ User tries to force-stop the app: ‚úÖ Auto-restarts
                ‚Ä¢ Device reboots: ‚úÖ Automatically starts on boot
                ‚Ä¢ System kills background services: ‚úÖ Watchdog restarts them
                ‚Ä¢ User disables components: ‚úÖ Self-healing re-enables them
                ‚Ä¢ Battery optimization kills services: ‚úÖ Bypass mechanisms active
                
                The malware is now extremely difficult to remove!
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun updateStatus(message: String) {
        statusTextView.text = "${statusTextView.text}$message\n"
        statusTextView.post {
            val parent = statusTextView.parent as android.widget.ScrollView
            parent.fullScroll(android.widget.ScrollView.FOCUS_DOWN)
        }
    }

    override fun onResume() {
        super.onResume()
        // Update status when returning to activity
        activityScope.launch {
            delay(500)
            checkPersistenceStatus()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        activityScope.cancel()
    }
}
