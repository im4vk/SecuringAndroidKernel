package com.securitydemo.malware.activities

import android.app.AlertDialog
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.securitydemo.malware.R
import com.securitydemo.malware.utils.SocialEngineeringManager
import kotlinx.coroutines.*

/**
 * SECURITY DEMO: Social Engineering Activity
 * 
 * This activity demonstrates psychological manipulation techniques used by malware:
 * - Fake system dialogs and security warnings
 * - Deceptive permission requests
 * - Urgency and fear-based manipulation
 * - Authority impersonation (system/security)
 * - Fake update and maintenance notifications
 * - User interface spoofing and mimicry
 * 
 * EDUCATIONAL PURPOSE ONLY - Shows real social engineering methods
 */
class SocialEngineeringActivity : AppCompatActivity() {

    private lateinit var statusTextView: TextView
    private lateinit var fakeSecurityWarningButton: Button
    private lateinit var fakeSystemUpdateButton: Button
    private lateinit var fakePermissionRequestButton: Button
    private lateinit var phishingAttackButton: Button
    private lateinit var urgencyManipulationButton: Button
    private lateinit var authorityImpersonationButton: Button

    private lateinit var socialEngineeringManager: SocialEngineeringManager
    private val activityScope = CoroutineScope(Dispatchers.Main + SupervisorJob())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_social_engineering)

        initializeViews()
        socialEngineeringManager = SocialEngineeringManager(this)
        
        showSocialEngineeringWarning()
        updateStatus("🎭 Social Engineering Demo Ready\n")
        updateStatus("⚠️ These techniques are used to manipulate users psychologically\n")
    }

    private fun initializeViews() {
        statusTextView = findViewById(R.id.tv_social_engineering_status)
        fakeSecurityWarningButton = findViewById(R.id.btn_fake_security_warning)
        fakeSystemUpdateButton = findViewById(R.id.btn_fake_system_update)
        fakePermissionRequestButton = findViewById(R.id.btn_fake_permission_request)
        phishingAttackButton = findViewById(R.id.btn_phishing_attack)
        urgencyManipulationButton = findViewById(R.id.btn_urgency_manipulation)
        authorityImpersonationButton = findViewById(R.id.btn_authority_impersonation)

        fakeSecurityWarningButton.setOnClickListener { demonstrateFakeSecurityWarning() }
        fakeSystemUpdateButton.setOnClickListener { demonstrateFakeSystemUpdate() }
        fakePermissionRequestButton.setOnClickListener { demonstrateFakePermissionRequest() }
        phishingAttackButton.setOnClickListener { demonstratePhishingAttack() }
        urgencyManipulationButton.setOnClickListener { demonstrateUrgencyManipulation() }
        authorityImpersonationButton.setOnClickListener { demonstrateAuthorityImpersonation() }
    }

    private fun showSocialEngineeringWarning() {
        AlertDialog.Builder(this)
            .setTitle("⚠️ Social Engineering Demo")
            .setMessage("""
                This demonstrates psychological manipulation techniques:
                
                🎭 SOCIAL ENGINEERING TACTICS:
                • Fake security warnings and alerts
                • Deceptive system notifications
                • Authority impersonation (system/security)
                • Urgency and fear-based manipulation
                • Fake permission justifications
                • User interface spoofing
                
                🎯 ATTACK OBJECTIVES:
                • Trick users into granting permissions
                • Manipulate users into installing malware
                • Create false sense of urgency
                • Bypass user security awareness
                • Exploit trust in system authorities
                
                💡 EDUCATIONAL PURPOSE:
                Learn to recognize these manipulation techniques!
                
                ⚠️ This is for educational purposes only!
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun demonstrateFakeSecurityWarning() {
        updateStatus("🚨 DEMONSTRATING FAKE SECURITY WARNING...\n")
        
        activityScope.launch {
            updateStatus("Creating convincing fake security alert...")
            delay(1000)
            
            // Show fake security warning that looks like a real system dialog
            socialEngineeringManager.showFakeSecurityWarning { granted ->
                if (granted) {
                    updateStatus("✅ User fell for fake security warning!")
                    updateStatus("🎯 Social engineering successful - user granted permissions")
                    updateStatus("💀 In real attack: Malware would now have elevated access\n")
                    
                    showSocialEngineeringSuccess("Security Warning", 
                        "User believed fake virus alert and granted permissions")
                } else {
                    updateStatus("❌ User rejected fake security warning")
                    updateStatus("🛡️ User security awareness prevented attack\n")
                }
            }
        }
    }

    private fun demonstrateFakeSystemUpdate() {
        updateStatus("📱 DEMONSTRATING FAKE SYSTEM UPDATE...\n")
        
        activityScope.launch {
            updateStatus("Crafting convincing system update notification...")
            delay(1000)
            
            socialEngineeringManager.showFakeSystemUpdate { granted ->
                if (granted) {
                    updateStatus("✅ User fell for fake system update!")
                    updateStatus("🎯 Social engineering successful - user believes system needs update")
                    updateStatus("💀 In real attack: Malware would be installed as 'system update'\n")
                    
                    showSocialEngineeringSuccess("System Update", 
                        "User believed fake update notification and approved installation")
                } else {
                    updateStatus("❌ User rejected fake system update")
                    updateStatus("🛡️ User was suspicious of unauthorized update request\n")
                }
            }
        }
    }

    private fun demonstrateFakePermissionRequest() {
        updateStatus("🔓 DEMONSTRATING FAKE PERMISSION REQUEST...\n")
        
        activityScope.launch {
            updateStatus("Creating deceptive permission justification...")
            delay(1000)
            
            socialEngineeringManager.showFakePermissionRequest { granted ->
                if (granted) {
                    updateStatus("✅ User fell for fake permission justification!")
                    updateStatus("🎯 Social engineering successful - user granted dangerous permissions")
                    updateStatus("💀 In real attack: Malware would now have extensive device access\n")
                    
                    showSocialEngineeringSuccess("Permission Request", 
                        "User granted permissions based on false justification")
                } else {
                    updateStatus("❌ User rejected deceptive permission request")
                    updateStatus("🛡️ User questioned permission justification\n")
                }
            }
        }
    }

    private fun demonstratePhishingAttack() {
        updateStatus("🎣 DEMONSTRATING PHISHING ATTACK...\n")
        
        activityScope.launch {
            updateStatus("Launching credential harvesting attack...")
            delay(1000)
            
            socialEngineeringManager.showPhishingDialog { credentialsEntered ->
                if (credentialsEntered) {
                    updateStatus("✅ User fell for phishing attack!")
                    updateStatus("🎯 Social engineering successful - user entered credentials")
                    updateStatus("💀 In real attack: Login credentials would be stolen\n")
                    
                    showSocialEngineeringSuccess("Phishing Attack", 
                        "User entered credentials in fake login dialog")
                } else {
                    updateStatus("❌ User avoided phishing trap")
                    updateStatus("🛡️ User recognized suspicious login request\n")
                }
            }
        }
    }

    private fun demonstrateUrgencyManipulation() {
        updateStatus("⏰ DEMONSTRATING URGENCY MANIPULATION...\n")
        
        activityScope.launch {
            updateStatus("Creating false sense of urgency...")
            delay(1000)
            
            socialEngineeringManager.showUrgencyManipulation { acted ->
                if (acted) {
                    updateStatus("✅ User fell for urgency manipulation!")
                    updateStatus("🎯 Social engineering successful - user acted under pressure")
                    updateStatus("💀 In real attack: User bypassed normal security checks\n")
                    
                    showSocialEngineeringSuccess("Urgency Manipulation", 
                        "User made hasty decision due to artificial time pressure")
                } else {
                    updateStatus("❌ User resisted urgency pressure")
                    updateStatus("🛡️ User took time to think before acting\n")
                }
            }
        }
    }

    private fun demonstrateAuthorityImpersonation() {
        updateStatus("👮 DEMONSTRATING AUTHORITY IMPERSONATION...\n")
        
        activityScope.launch {
            updateStatus("Impersonating trusted authority...")
            delay(1000)
            
            socialEngineeringManager.showAuthorityImpersonation { complied ->
                if (complied) {
                    updateStatus("✅ User fell for authority impersonation!")
                    updateStatus("🎯 Social engineering successful - user trusted fake authority")
                    updateStatus("💀 In real attack: User would follow malicious instructions\n")
                    
                    showSocialEngineeringSuccess("Authority Impersonation", 
                        "User complied with request from fake authority figure")
                } else {
                    updateStatus("❌ User questioned authority request")
                    updateStatus("🛡️ User verified authority before complying\n")
                }
            }
        }
    }

    private fun showSocialEngineeringSuccess(attackType: String, description: String) {
        AlertDialog.Builder(this)
            .setTitle("🎯 SOCIAL ENGINEERING SUCCESSFUL")
            .setMessage("""
                Attack Type: $attackType
                
                WHAT HAPPENED:
                $description
                
                REAL-WORLD CONSEQUENCES:
                • User security compromised through manipulation
                • Malware gains unauthorized access
                • Personal data at risk of theft
                • Device potentially fully compromised
                • User unaware they've been tricked
                
                PREVENTION:
                • Always verify unexpected warnings
                • Question urgent requests for action
                • Don't trust unsolicited security alerts
                • Verify update sources through official channels
                • Take time to think before granting permissions
                
                This demonstrates the power of social engineering!
            """.trimIndent())
            .setPositiveButton("Understood", null)
            .show()
    }

    private fun updateStatus(message: String) {
        statusTextView.text = "${statusTextView.text}$message\n"
        statusTextView.post {
            val parent = statusTextView.parent as android.widget.ScrollView
            parent.fullScroll(android.widget.ScrollView.FOCUS_DOWN)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        activityScope.cancel()
    }
}
