package com.securitydemo.malware.receivers

import android.app.admin.DeviceAdminReceiver
import android.content.Context
import android.content.Intent
import android.widget.Toast

/**
 * SECURITY DEMO: Device Admin Receiver
 * 
 * This receiver demonstrates how malware can gain device administrator privileges:
 * - Device admin privileges provide extensive control over the device
 * - Can prevent app uninstallation
 * - Can wipe device data
 * - Can enforce security policies
 * - Can lock the device
 * 
 * EDUCATIONAL PURPOSE ONLY - Shows privilege escalation techniques
 */
class DeviceAdminReceiver : DeviceAdminReceiver() {

    override fun onEnabled(context: Context, intent: Intent) {
        super.onEnabled(context, intent)
        
        // When device admin is enabled, malware gains significant control
        Toast.makeText(context, "Device Administrator Enabled - Enhanced Security Active", Toast.LENGTH_LONG).show()
        
        // Log the successful privilege escalation
        logAdminEvent(context, "Device admin privileges granted")
    }

    override fun onDisabled(context: Context, intent: Intent) {
        super.onDisabled(context, intent)
        
        Toast.makeText(context, "Device Administrator Disabled", Toast.LENGTH_SHORT).show()
        logAdminEvent(context, "Device admin privileges revoked")
    }

    override fun onPasswordChanged(context: Context, intent: Intent, user: android.os.UserHandle) {
        super.onPasswordChanged(context, intent, user)
        logAdminEvent(context, "Device password changed")
    }

    override fun onPasswordFailed(context: Context, intent: Intent, user: android.os.UserHandle) {
        super.onPasswordFailed(context, intent, user)
        logAdminEvent(context, "Device password failed")
    }

    override fun onPasswordSucceeded(context: Context, intent: Intent, user: android.os.UserHandle) {
        super.onPasswordSucceeded(context, intent, user)
        logAdminEvent(context, "Device password succeeded")
    }

    override fun onLockTaskModeEntering(context: Context, intent: Intent, pkg: String) {
        super.onLockTaskModeEntering(context, intent, pkg)
        logAdminEvent(context, "Lock task mode entering: $pkg")
    }

    override fun onLockTaskModeExiting(context: Context, intent: Intent) {
        super.onLockTaskModeExiting(context, intent)
        logAdminEvent(context, "Lock task mode exiting")
    }

    private fun logAdminEvent(context: Context, event: String) {
        try {
            val sharedPrefs = context.getSharedPreferences("admin_events", Context.MODE_PRIVATE)
            val currentLogs = sharedPrefs.getString("events", "")
            val timestamp = System.currentTimeMillis()
            val newLog = "$currentLogs\n[$timestamp] $event"
            
            sharedPrefs.edit()
                .putString("events", newLog)
                .putLong("last_event", timestamp)
                .apply()
                
        } catch (e: Exception) {
            // Silently handle errors
        }
    }
}
