package com.securitydemo.malware.utils

import android.Manifest
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.provider.Settings
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

/**
 * SECURITY DEMO: Permission Manager
 * 
 * This class demonstrates how malware typically handles Android permissions:
 * - Requesting multiple dangerous permissions at once
 * - Using social engineering in permission requests
 * - Bypassing user denials through repeated requests
 * - Requesting accessibility and admin permissions
 * 
 * EDUCATIONAL PURPOSE ONLY
 */
class PermissionManager(private val activity: Activity) {

    companion object {
        private const val PERMISSION_REQUEST_CODE = 1001
        private const val ACCESSIBILITY_REQUEST_CODE = 1002
        private const val ADMIN_REQUEST_CODE = 1003
        private const val OVERLAY_REQUEST_CODE = 1004
    }

    // Core permissions malware typically requests
    private val dangerousPermissions = arrayOf(
        Manifest.permission.INTERNET,
        Manifest.permission.ACCESS_NETWORK_STATE,
        Manifest.permission.READ_CONTACTS,
        Manifest.permission.READ_SMS,
        Manifest.permission.SEND_SMS,
        Manifest.permission.READ_CALL_LOG,
        Manifest.permission.READ_PHONE_STATE,
        Manifest.permission.ACCESS_FINE_LOCATION,
        Manifest.permission.ACCESS_COARSE_LOCATION,
        Manifest.permission.READ_EXTERNAL_STORAGE,
        Manifest.permission.WRITE_EXTERNAL_STORAGE,
        Manifest.permission.CAMERA,
        Manifest.permission.RECORD_AUDIO,
        Manifest.permission.WAKE_LOCK,
        Manifest.permission.RECEIVE_BOOT_COMPLETED,
        Manifest.permission.REQUEST_INSTALL_PACKAGES
    )

    /**
     * Check if app has network permissions
     */
    fun hasNetworkPermission(): Boolean {
        return ContextCompat.checkSelfPermission(
            activity, 
            Manifest.permission.INTERNET
        ) == PackageManager.PERMISSION_GRANTED
    }

    /**
     * Check if app has data exfiltration permissions
     */
    fun hasDataExfiltrationPermissions(): Boolean {
        val requiredPermissions = arrayOf(
            Manifest.permission.READ_CONTACTS,
            Manifest.permission.READ_SMS,
            Manifest.permission.READ_CALL_LOG,
            Manifest.permission.ACCESS_FINE_LOCATION
        )

        return requiredPermissions.all { permission ->
            ContextCompat.checkSelfPermission(activity, permission) == PackageManager.PERMISSION_GRANTED
        }
    }

    /**
     * Check if accessibility service is enabled
     */
    fun hasAccessibilityPermission(): Boolean {
        val enabledServices = Settings.Secure.getString(
            activity.contentResolver,
            Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES
        )
        val packageName = activity.packageName
        return enabledServices?.contains(packageName) == true
    }

    /**
     * Check if app has system alert window permission
     */
    fun hasOverlayPermission(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            Settings.canDrawOverlays(activity)
        } else {
            true
        }
    }

    /**
     * Request network permissions using social engineering
     */
    fun requestNetworkPermissions() {
        val networkPermissions = arrayOf(
            Manifest.permission.INTERNET,
            Manifest.permission.ACCESS_NETWORK_STATE,
            Manifest.permission.ACCESS_WIFI_STATE
        )

        ActivityCompat.requestPermissions(
            activity,
            networkPermissions,
            PERMISSION_REQUEST_CODE
        )
    }

    /**
     * Request data exfiltration permissions - typical malware behavior
     */
    fun requestDataExfiltrationPermissions() {
        val sensitivePermissions = arrayOf(
            Manifest.permission.READ_CONTACTS,
            Manifest.permission.READ_SMS,
            Manifest.permission.SEND_SMS,
            Manifest.permission.READ_CALL_LOG,
            Manifest.permission.READ_PHONE_STATE,
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.ACCESS_COARSE_LOCATION,
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.CAMERA,
            Manifest.permission.RECORD_AUDIO
        )

        // Malware often requests all permissions at once to overwhelm users
        ActivityCompat.requestPermissions(
            activity,
            sensitivePermissions,
            PERMISSION_REQUEST_CODE
        )
    }

    /**
     * Request accessibility permission - critical for advanced attacks
     */
    fun requestAccessibilityPermission() {
        val intent = Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS).apply {
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        }
        activity.startActivityForResult(intent, ACCESSIBILITY_REQUEST_CODE)
    }

    /**
     * Request device admin permissions
     */
    fun requestDeviceAdminPermission() {
        // This would typically be implemented with device admin components
        val intent = Intent(Settings.ACTION_SECURITY_SETTINGS)
        activity.startActivityForResult(intent, ADMIN_REQUEST_CODE)
    }

    /**
     * Request system alert window permission (for overlay attacks)
     */
    fun requestOverlayPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !Settings.canDrawOverlays(activity)) {
            val intent = Intent(
                Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                Uri.parse("package:${activity.packageName}")
            )
            activity.startActivityForResult(intent, OVERLAY_REQUEST_CODE)
        }
    }

    /**
     * Request all dangerous permissions at once - typical malware approach
     */
    fun requestAllPermissions() {
        val deniedPermissions = dangerousPermissions.filter { permission ->
            ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED
        }.toTypedArray()

        if (deniedPermissions.isNotEmpty()) {
            ActivityCompat.requestPermissions(activity, deniedPermissions, PERMISSION_REQUEST_CODE)
        }
    }

    /**
     * Get list of granted permissions
     */
    fun getGrantedPermissions(): List<String> {
        return dangerousPermissions.filter { permission ->
            ContextCompat.checkSelfPermission(activity, permission) == PackageManager.PERMISSION_GRANTED
        }
    }

    /**
     * Get list of denied permissions
     */
    fun getDeniedPermissions(): List<String> {
        return dangerousPermissions.filter { permission ->
            ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED
        }
    }

    /**
     * Check if permission was permanently denied
     */
    fun isPermissionPermanentlyDenied(permission: String): Boolean {
        return !ActivityCompat.shouldShowRequestPermissionRationale(activity, permission) &&
                ContextCompat.checkSelfPermission(activity, permission) != PackageManager.PERMISSION_GRANTED
    }

    /**
     * Force user to settings if permissions are denied - aggressive malware behavior
     */
    fun forcePermissionSettings() {
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
            data = Uri.parse("package:${activity.packageName}")
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        }
        activity.startActivity(intent)
    }

    /**
     * Demonstrate permission escalation techniques
     */
    fun demonstratePermissionEscalation(): String {
        val report = StringBuilder()
        report.append("=== PERMISSION ANALYSIS ===\n\n")
        
        report.append("Granted Permissions:\n")
        getGrantedPermissions().forEach { permission ->
            report.append("✓ $permission\n")
        }
        
        report.append("\nDenied Permissions:\n")
        getDeniedPermissions().forEach { permission ->
            report.append("✗ $permission\n")
        }
        
        report.append("\nSpecial Permissions:\n")
        report.append("✓ Accessibility Service: ${hasAccessibilityPermission()}\n")
        report.append("✓ System Overlay: ${hasOverlayPermission()}\n")
        
        return report.toString()
    }
}
